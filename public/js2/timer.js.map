{"version":3,"sources":["../js/timer.js"],"names":["Timer","time","interval","startTime","timeoutID","callback","cancel","Date","now","setTimeout","clearTimeout","endTime","module","exports","e","console","warn"],"mappings":"AAAA;;;;AAIA;;;;AAIA;;;;;;IAEMA,K;AAEJ,mBAAuB;AAAA,QAAVC,IAAU,uEAAH,CAAG;;AAAA;;AAErB;AACA,SAAKC,QAAL,GAAgBD,IAAhB;;AAEA;AACA,SAAKE,SAAL;;AAEA;AACA,SAAKC,SAAL;;AAEA;AACA,SAAKC,QAAL,GAAgB,YAAM,CAAE,CAAxB;AACD;;AAED;;;;;4BAC2B;AAAA,UAArBA,QAAqB,uEAAV,YAAM,CAAE,CAAE;;AACzB,UAAG,KAAKD,SAAR,EAAmB,KAAKE,MAAL;;AAEnB,WAAKD,QAAL,GAAgBA,QAAhB;AACA,WAAKF,SAAL,GAAiBI,KAAKC,GAAL,EAAjB;AACA,WAAKJ,SAAL,GAAiBK,WAAW,KAAKJ,QAAhB,EAA0B,KAAKH,QAA/B,CAAjB;AACD;;AAED;;;;0BACM;AACJ,WAAKI,MAAL;AACA,WAAKD,QAAL;AACD;;AAED;;;;6BACS;AACPK,mBAAa,KAAKN,SAAlB;AACA,aAAO,KAAKA,SAAZ;AACD;;;wBAEa;AAAE,aAAO,KAAKD,SAAL,GAAiB,KAAKD,QAA7B;AAAuC;;;wBACrC;AAAE,aAAOK,KAAKC,GAAL,KAAa,KAAKL,SAAzB;AAAoC;;;wBACzC;AAAE,aAAO,KAAKQ,OAAL,GAAeJ,KAAKC,GAAL,EAAtB;AAAkC;;;;;;AAGrD;AACA;;;AACE,IAAI;AACJI,SAAOC,OAAP,GAAiBb,KAAjB;AACC,CAFD,CAEE,OAAMc,CAAN,EAAS;AAACC,UAAQC,IAAR,CAAaF,CAAb;AAAgB","file":"timer.js","sourcesContent":["/**\n * Created by davidsruiz on 1/7/17.\n */\n\n/*\n *  Timer: a class that functions as a software timer, a device to countdown a time interval given the amount\n */\n\n\"use strict\";\n\nclass Timer {\n\n  constructor (time = 0) {\n\n    // the waiting period expressed as time in ms\n    this.interval = time;\n\n    // this.startTime: registers the time of the last activation of the timer (if any)\n    this.startTime;\n\n    // this.timeoutID: holds the running system timeout ID (if any)\n    this.timeoutID;\n\n    // this.callback: holds the callback (if any) to be executed upon completion\n    this.callback = () => {};\n  }\n\n  /* this.start: starts the timer executing the callback upon completion */\n  start(callback = () => {}) {\n    if(this.timeoutID) this.cancel();\n\n    this.callback = callback;\n    this.startTime = Date.now();\n    this.timeoutID = setTimeout(this.callback, this.interval);\n  }\n\n  /* this.end: ends the timer prematurely executing the callback immediately */\n  end() {\n    this.cancel();\n    this.callback();\n  }\n\n  /* this.cancel: cancels callback execution */\n  cancel() {\n    clearTimeout(this.timeoutID);\n    delete this.timeoutID;\n  }\n\n  get endTime() { return this.startTime + this.interval }\n  get timeElapsed() { return Date.now() - this.startTime }\n  get timeLeft() { return this.endTime - Date.now() }\n}\n\n// var module;\n// if(module)\n  try {\n  module.exports = Timer;\n  } catch(e) {console.warn(e)}"]}