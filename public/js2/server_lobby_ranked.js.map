{"version":3,"sources":["../js/server_lobby_ranked.js"],"names":["Lobby","require","Utilities","median","list","sort","a","b","half","Math","floor","length","mean","reduce","sqrDiff","reference","map","pow","number","standardDeviation","sqrt","deviation","clearArray","array","pop","RankedLobby","id","type","requestLobbyFunction","waitThenCheckLobbyFunction","cycles","options","editableSettings","requestLobby","waitThenUpdateAvailabilityStatus","addListener","rotationUpdated","syncLobbyRotation","rotation","mode","nextChange","emit","client","rank","evaluatePlayerRank","ranks","playersMap","data","Number","valueOf","dev","nextChangeTime","values","size","module","exports"],"mappings":"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","file":"server_lobby_ranked.js","sourcesContent":["\n\"use strict\";\n\n\nconst Lobby = require('./server_lobby.js');\n\nconst Utilities = {\n\n  median :\n    list => {\n\n      list = list.sort((a, b) => a - b);\n\n      const half = Math.floor(list.length/2);\n\n      if(list.length % 2)\n        return list[half];\n      else\n        return (list[half-1] + list[half]) / 2.0;\n\n    },\n\n  mean : list => list.reduce((a, b) => a + b, 0) / list.length,\n\n  sqrDiff : (list, reference) => list.map(number => Math.pow(number - reference, 2)),\n\n  standardDeviation : list => Math.sqrt(Utilities.mean(Utilities.sqrDiff(list, Utilities.mean(list)))),\n\n  deviation : list => Math.sqrt(Utilities.mean(Utilities.sqrDiff(list, Utilities.median(list)))),\n\n\n\n  // clear array\n\n  clearArray: array => { while(array.length) array.pop() },\n\n};\n\n\n\nclass RankedLobby extends Lobby {\n\n  constructor(id, type, requestLobbyFunction, waitThenCheckLobbyFunction, cycles, options = {}) {\n    super(id, type, options);\n\n    Utilities.clearArray(this.editableSettings);\n\n\n    // request lobby for player using rank\n    //  ( this is a function provided by the lobby manager )\n    this.requestLobby = requestLobbyFunction;\n    this.waitThenUpdateAvailabilityStatus = waitThenCheckLobbyFunction;\n\n    this.cycles = cycles;\n    this.cycles.addListener('rotationUpdate', ()=>this.rotationUpdated());\n\n    this.syncLobbyRotation();\n\n  }\n\n  get rotation() { return this.cycles.rotation }\n  get nextChange() { return this.cycles.nextChangeTime }\n\n  get rank() {\n    return [...this.playersMap.values()].map(data => data[1]).reduce((a, b) => a + b, 0) / this.playersMap.size;\n  }\n\n  endGame() {\n    super.endGame();\n\n    // // client and ranks from connected players\n    // const clientRanks = [...this.playersMap].map(([client, data]) => [client, Number(data[1]).valueOf()]);\n    // const ranks = clientRanks.map(i => i[1]);\n    // const median = Utilities.median(ranks);\n    // const dev = Utilities.deviation(ranks);\n    //\n    // const above = [];\n    // const below = [];\n    //\n    // for(let [client, rank] of clientRanks) {\n    //\n    //   // any client's rank out of bounds is redirected\n    //   if(rank > median + dev) {\n    //     above.push([client, rank]);\n    //   } else if(rank < median - dev) {\n    //     below.push([client, rank]);\n    //   }\n    //\n    // }\n    //\n    // let newLobbyID;\n    //\n    // newLobbyID = this.requestLobby(Utilities.median(above.map(i => i[1])));\n    // for(let [client, ] of above) {\n    //   client.emit('shouldChangeLobby', newLobbyID);\n    // }\n    //\n    // newLobbyID = this.requestLobby(Utilities.median(below.map(i => i[1])));\n    // for(let [client, ] of below) {\n    //   client.emit('shouldChangeLobby', newLobbyID);\n    // }\n    //\n    // this.waitThenUpdateAvailabilityStatus(this, 10000);\n\n  }\n\n  syncLobbyRotation() {\n\n    const {map, mode} = this.rotation;\n\n    this.options['map'] = map;\n    this.options['mode'] = mode;\n\n  }\n\n  rotationUpdated() {\n\n    const rotation = this.rotation;\n    const nextChange = this.nextChange;\n    const {map, mode} = rotation;\n\n    this.options['map'] = map;\n    this.options['mode'] = mode;\n\n    this.emit('optionsUpdate', ['map', map]);\n    this.emit('optionsUpdate', ['mode', mode]);\n    this.emit('rotationUpdate', {rotation, nextChange});\n\n  }\n\n\n  updateUserRank(client, rank) {\n\n    super.updateUserRank(client, rank);\n    this.evaluatePlayerRank(client, rank);\n\n\n\n  }\n\n  evaluatePlayerRank(client, rank) {\n\n    // client and ranks from connected players\n    const ranks = [...this.playersMap].map(([client, data]) => Number(data[1]).valueOf());\n    const median = Utilities.median(ranks);\n    const dev = Utilities.deviation(ranks);\n\n    if(rank > median + dev || rank < median - dev) {\n      client.emit('shouldChangeLobby', this.requestLobby(rank));\n      this.waitThenUpdateAvailabilityStatus(this, 10000);\n    }\n\n  }\n\n\n  map() {\n\n    // 1. Do regular things\n    const map = super.map();\n\n\n    // 2. Add special ranked lobby things, like:\n    // 2a. Rotation info\n    map.rotation = this.rotation;\n    map.nextChange = this.nextChange;\n\n\n    // 3. Return\n    return map;\n\n  }\n\n  emitAllLobbyData() {\n    this.emit('lobbyUpdate', this.map());\n  }\n\n\n\n\n\n\n}\n\n\n\n\n\nmodule.exports = RankedLobby;\n"]}