{"version":3,"sources":["../js/server_lobby.js"],"names":["Timer","require","_","TIME","sec","mil","min","MAX_PLAYER_LIMIT","MIN_PLAYER_LIMIT","MAX_NUM_OF_TEAMS","GAME_DURATION","COUNTDOWN_DURATION","OVERTIME_DURATION","Number","prototype","times","block","i","Array","sample","Math","floor","random","length","shuffle","sort","flipCoin","highestValuedIndex","highest","String","empty","trim","new","l","filler","a","push","p","randomIntMinMax","max","Lobby","id","type","options","required_players","players","limit","max_players","max_teams","teams","numOfTeams","ongoing","Set","colors","state","scores","overtime","timer","setupData","gameOverCallback","spectators","playersMap","Map","gameVars","map","mode","stock","maxTeams","maxPlayers","editableSettings","lastGameResults","client","add","lobby","delete","emit","id_","modeLogic","flagIsHeldBy","flagDropped","size","endGame","ship_data","Promise","resolve","reject","full","set","shipType","has","get","sustainable","allPlayersReady","password","setPassword","clearPassword","timerLength","Object","assign","decideTeams","decideColors","mapPlayers","duration","fill","MODES","start","clear","numberOfTeams","undefined","c","data","indexes","forEach","index","teamsIndex","associations","from","playersIndex","playersTeam","console","log","DeepSpaceGame","colorCombinations","LIGHT","randomDraw","results","recap","setWinForPlayers","cancel","clearGameData","unreadyAllPlayers","mapUsers","key","value","contains","msg","connected","connectedClient","userid","wins","bestScore","score","team","getTeamAndPlayerFor","result","getPlayerIndexForClient","hits","indexList","getIDforPlayerIndex","indexOf","winners","getTeam","flagHolder","leadTeam","setTimeout","finish","interval","timeout","endCurrentGame","simplify","clearLastGame","client_id","teamIndex","playerIndex","test","_password","play_arr","spec_arr","mapSpectators","code","game_settings","mapSettings","users","name","filter","str","settings","noneditableSettings","each","val","broadcast","hp","fromID","playerRecordsHPGivenIncrement","addBlockForTeam","setBlockTeam","removeBlock","toID","playerRecordsKillIncrement","playerRecordsDeathIncrement","flagAvailable","flagCaptured","updateTeamScore","scoreForTeam","everyone","concat","unsus","b","s","t","GameLogic","endCallback","end","setupPlayerRecords","playerRecords","player","record","recordsArray","formatScores","formatRecords","CTFModeLogic","arguments","playerWithFlag","updates","playersID","number","TerritorialModeLogic","blocks","teamCollection","maps","spawn","x","y","assortment","c1","c2","REF","typeDesc","ship","sub","stats","scoringUnits","module","exports"],"mappings":"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","file":"server_lobby.js","sourcesContent":["\n\"use strict\";\n\nlet Timer = require('./timer.js');\nconst _ = require('./ext/underscore-min.js')\n\nlet TIME = {sec: function(mil) {return mil * 1000}, min: function(mil) {return this.sec(mil) * 60}};\n\nconst MAX_PLAYER_LIMIT = 8;\nconst MIN_PLAYER_LIMIT = 2;\nconst MAX_NUM_OF_TEAMS = 4;\nconst GAME_DURATION = [TIME.min(5), TIME.min(3), TIME.min(20)]; // 5 min 180000 3 min\nconst COUNTDOWN_DURATION = TIME.sec(3); // 3 sec\nconst OVERTIME_DURATION = TIME.sec(30);\n\nNumber.prototype.times = function(block) { for(var i = 0; i < this; i++) block(i); };\nArray.prototype.sample = function() { return this[Math.floor(Math.random() * this.length)] };\nArray.prototype.shuffle = function() { return this.sort(() => Math.flipCoin() )};\nArray.prototype.highestValuedIndex = function() { let highest = 0; for(let i = 0; i < this.length; i++) { if(this[i] > this[highest]) highest = i; if(typeof this[i] != 'undefined' && typeof this[highest] == 'undefined') highest = i; } return highest; };\nString.prototype.empty = function() { return this.trim() == \"\"};\nArray.new = function(l = 0, filler) { var a = new Array(); l.times((i)=>{a.push(typeof(filler)==\"function\" ? filler(i) : filler)}); return a }\nMath.flipCoin = (p = 0.5) => Math.random() < p;\nMath.randomIntMinMax = (min, max) => Math.floor((Math.random()*(max - min)) + min);\n\nclass Lobby {\n  constructor(id, type, options = {}) {\n    this.id = id;\n    this.type = type;\n    this.required_players = options.players || MIN_PLAYER_LIMIT;\n    this.limit = options.max_players || options.players || MAX_PLAYER_LIMIT; // max_players_allowed\n    // this.limit = pCount || NUM_OF_PLAYERS;\n    this.max_teams = options.teams || MAX_NUM_OF_TEAMS;\n    this.numOfTeams = options.teams;\n\n    this.ongoing = false;\n\n    // this.connected = new Set();\n    this.players = new Set();\n\n    this.colors;\n    // this.colors = DeepSpaceGame.colorCombinations.get(this.numOfTeams).sample().shuffle().map(e => DeepSpaceGame.colors[e])\n\n    this.state = {scores: [], overtime: false};\n    this.timer = new Timer(GAME_DURATION + COUNTDOWN_DURATION);\n    this.setupData;\n\n    this.gameOverCallback;\n\n\n    // new :)\n    this.spectators = new Set();\n    this.playersMap = new Map();\n    this.gameVars = null; // set during this.startGame\n    this.options = {\n      // settable\n      map: 0,\n      mode: 1,\n      stock: 0,\n\n      // non-settable\n      maxTeams: MAX_NUM_OF_TEAMS,\n      numOfTeams: options.teams,\n      maxPlayers: this.limit\n    };\n    this.editableSettings = ['map', 'mode']\n    this.lastGameResults = new Map();\n  }\n\n  // NEW //\n\n  get full() {return !(this.playersMap.size < this.limit) }\n  get empty() {return (this.playersMap.size == 0 && this.spectators.size == 0) }\n\n  get connected() {\n    let everyone = Array.from(this.spectators).concat(Array.from(this.playersMap).map(i=>i[0]));\n    return new Set(everyone);\n  }\n\n  connect(client) {\n    this.spectators.add(client);\n    client.lobby = this;\n  }\n\n  disconnect(client) {\n    // lobby actions\n    this.spectators.delete(client);\n    this.playersMap.delete(client);\n\n\n    // game actions //\n\n    // if game is ongoing\n    if(this.gameVars) {\n\n      // alert other clients\n      this.emit('playerDisconnected', client.id_);\n\n      // take action depending on mode\n      switch(this.gameVars.options.mode) {\n\n        // ctf\n        case 0:\n\n          // make sure client isn't holding flag\n          if(this.gameVars.modeLogic.flagIsHeldBy(client.id_)) {\n            this.emit('flagDropped');\n            this.gameVars.modeLogic.flagDropped();\n          }\n\n          break;\n\n      }\n\n      // if no player is left end game\n      if(this.playersMap.size == 0) this.endGame();\n    }\n\n\n\n\n    delete client.lobby;\n  }\n\n  join(client, ship_data) {\n\n    return (new Promise((resolve, reject) => {\n\n      if(!this.full) {\n        if(!(ship_data[2] < this.options.maxTeams)) reject('illegal team number');\n\n        ship_data[3] = false;\n\n        this.spectators.delete(client);\n        this.playersMap.set(client, ship_data);\n        resolve();\n      } else {\n        reject('lobby is full');\n      }\n\n    }))\n  }\n\n  startFrom(client, shipType) {\n\n    return (new Promise((resolve, reject) => {\n\n      if(this.playersMap.has(client)) {\n        this.playersMap.get(client)[3] = true;\n        this.playersMap.get(client)[4] = shipType;\n        resolve(this.sustainable && this.allPlayersReady());\n      } else {\n        reject('first become a player');\n      }\n\n    }));\n  }\n\n  allPlayersReady() {\n    for(let [,p] of this.playersMap) if(!p[3]) return false;\n    return true;\n  }\n\n  setPasswordFrom(client, password) {\n    this.setPassword(password);\n    this.emit('passwordSet', password);\n  }\n\n  clearPasswordFrom(client) {\n    this.clearPassword();\n    this.emit('passwordCleared');\n  }\n\n\n\n\n  // start game!\n  // when everyone is ready\n\n  startGame() {\n\n    // id name team index shipType\n\n    const timerLength = GAME_DURATION[this.options.mode] + COUNTDOWN_DURATION;\n\n    this.gameVars = {\n\n      ongoing: true,\n\n      setupData: {},\n\n      scores: null,\n\n      timer: new Timer(timerLength),\n\n      modeLogic: null,\n\n      options: Object.assign({}, this.options),\n\n    };\n\n    // setup data\n    this.gameVars.setupData.teams = this.decideTeams();\n    this.gameVars.setupData.colors = this.decideColors();\n    this.gameVars.setupData.players = this.mapPlayers();\n    this.gameVars.setupData.duration = GAME_DURATION[this.options.mode];\n    this.gameVars.setupData.options = this.gameVars.options;\n\n    // scores from team count\n    this.gameVars.scores = new Array(this.gameVars.setupData.teams.length).fill(100);\n\n    this.gameVars.modeLogic = new MODES[this.options.mode](()=>this.endGame(), this.gameVars.setupData.teams.length, this.gameVars.setupData.players);\n\n    // timer start TODO - cleanup end game\n    this.gameVars.timer.start(() => this.endGame());\n\n    /*\n\n     flag captured\n     flag dropped\n     time expired\n\n\n     block created\n     block damaged\n     block converted\n\n     stock lost\n\n\n     */\n\n\n    // if(!this.setupData) {\n    //   this.gameOverCallback = callback;\n    //   this.ongoing = true;\n    //   this.timer.start(() => { this.timeout() });\n    //   var numOfTeams = this.setupTeams(); console.log(numOfTeams);\n    //   var colors = DeepSpaceGame.colorCombinations.get(numOfTeams).sample().shuffle().map(e => DeepSpaceGame.colors[e]);\n    //   var players = [], counter = 0;\n    //   var block = (id, p, i) => {\n    //     // p.team = i%numOfTeams;\n    //     return { name: p.name, team: p.team, index: i, id: id, type: p.type }\n    //   };\n    //   Array.from(this.players).shuffle().forEach(entry => {\n    //     let [id, player] = entry;\n    //     players.push(block(id, player, counter++));\n    //   });\n    //   this.setupData = {\n    //     teams: numOfTeams,\n    //     colors: colors,\n    //     players: players,\n    //     state: this.state,\n    //     disconnects: [],\n    //     tint: TINT.shuffle()\n    //   };\n    //\n    //   for (let [id, player] of this.players) player.ready = false;\n    //   for (let i = 0; i < numOfTeams; i++) this.state.scores.push({t:i, s:100});\n    // }\n    // this.setupData.duration = this.timer.timeLeft - COUNTDOWN_DURATION;\n    // return this.setupData;\n\n\n    // clear remaining data from last game\n    // no longer relevant\n    this.lastGameResults.clear();\n\n  }\n\n  // decideTeams()\n  //   returns an array of teams being arrays of players indexes\n  //   e.g. [[3, 2], [1, 5], [0, 4]] representing 3 teams\n  //        with team one consisting of players [3 and 2]\n  //        team two of [1 and 5] and three of [0 and 4]\n  decideTeams() {\n\n    let teams;\n\n    // 1. create team arrays\n    let numberOfTeams = this.options.numOfTeams;\n    if(numberOfTeams === undefined) { // if private\n      let teams = new Set();\n      for(let [c, data] of this.playersMap) teams.add(data[2] === 0 ? c : data[2]);\n      numberOfTeams = teams.size; // number of teams decided by player's choices\n    }\n    teams = Array.new(numberOfTeams, ()=>[]); // create array of arrays\n\n    // 2. distribute players to their respective teams\n    if(this.type == 0) { // if public (automatic dist)\n\n      let indexes = Array.new(this.playersMap.size, i => i).shuffle();\n      indexes.forEach((index, i) => {\n        teams[i % teams.length].push(index);\n      });\n\n    } else { // if private or practice (manual dist)\n\n      let teamsIndex = 0;\n      let associations = new Map();\n      Array.from(this.playersMap).forEach(([c, data], playersIndex) => {\n\n        const playersTeam = data[2];\n        if(playersTeam === 0) { // if solo\n          teams[teamsIndex++].push(playersIndex);\n        } else { // if chose team\n          if(associations.get(playersTeam) !== undefined) { // if team prev assoc.\n            teams[associations.get(playersTeam)].push(playersIndex)\n          } else { // if team not prev assoc.\n            associations.set(playersTeam, teamsIndex);\n            teams[teamsIndex++].push(playersIndex);\n          }\n        }\n\n      });\n\n    }\n\n    // 3. done\n    console.log(teams);\n    return teams;\n\n  }\n\n  // decideColors()\n  //   returns team colors and light shading information\n  //   e.g. [[2, 4, 5, 3], [45(deg), (color), (color)]]\n  decideColors() {\n    return ([\n      // team colors\n      DeepSpaceGame.colorCombinations.get(this.gameVars.setupData.teams.length).sample().shuffle(),\n\n      // light shading\n      LIGHT.randomDraw()\n    ]);\n  }\n\n  getSetupData() {\n    return this.gameVars.setupData;\n  }\n\n  endGame() { // ... think more of this\n\n    // 0. CHECK\n    // return if already ended\n    if(!this.gameVars) return;\n\n    \n    // 1. REVIEW AND CLOSE DETAILS\n\n    const results = this.gameVars.modeLogic.recap();\n\n    // if public .. weigh outcome\n    if(this.type == 0) this.setWinForPlayers(results);\n\n    // cancel timer if necessary\n    if(this.gameVars.timer) this.gameVars.timer.cancel();\n\n    // alert players\n    this.emit('gameEnded', results);\n\n\n    // 2. CLEAR\n\n    this.clearGameData();\n\n\n    // 3. SETUP NEW\n\n    this.unreadyAllPlayers();\n    this.emit('usersUpdate', this.mapUsers())\n\n  }\n\n  clearGameData() {\n\n    // return if game is already cleared\n    if(!this.gameVars) return;\n\n    // ...\n    delete this.gameVars;\n\n\n  }\n\n  unreadyAllPlayers() {\n    for(let [, data] of this.playersMap)\n      data[3] = false;\n  }\n\n\n\n\n\n\n\n  updateOptions(data) {\n\n    const [key, value] = data;\n\n    if(_(this.editableSettings).contains(key)) {\n\n      this.options[key] = value;\n\n      this.emit('optionsUpdate', data);\n\n    }\n\n\n  }\n\n\n\n\n\n\n  // join(client) {\n  //   var joined = false;\n  //   if(this.players.size < this.limit && !this.ongoing) {\n  //     this.players.set(client.userid, client);\n  //     client.active = true;\n  //     joined = true;\n  //   }\n  //   this.connected.set(client.userid, client);\n  //   client.lobby = this;\n  //   return joined;\n  // }\n\n  // remove(client) {\n  //   this.players.delete(client.userid);\n  //   this.connected.delete(client.userid);\n  //\n  //   if(client.active && this.ongoing)\n  //     this.setupData.disconnects.push(client.userid);\n  //\n  //   delete client.lobby;\n  //   client.active = false;\n  // }\n\n\n  \n  // Networking Socket Utilities\n  emit(msg, data) {\n    for (let [client, ] of this.playersMap)\n      client.emit(msg, data);\n    for (let client of this.spectators)\n      client.emit(msg, data);\n  }\n  broadcast(msg, data, client) { // TODO : redo\n    for (let connectedClient of this.connected)\n      if(connectedClient != client)\n        connectedClient.emit(msg, data);\n  }\n\n\n  \n  // to remove circular dependencies and minimize bandwidth consumption,\n  // only select data is sent over.\n  // simplify() {\n  //   var obj = {};\n  //   var block = (e) => {\n  //     return { name: e.name, cleared: this.playerCleared(e), ready: !!e.ready }\n  //   };\n  //   this.players.forEach((player)=>{\n  //     obj[player.userid] = block(player)\n  //   });\n  //   let send = { type: this.type, players: obj, capacity: this.limit, team_capacity: this.max_teams };\n  //   // if(this.type == 'private') send.team_capacity = this.max_teams;\n  //   return send;\n  // }\n\n  // start(callback) {\n  //   if(!this.setupData) {\n  //     this.gameOverCallback = callback;\n  //     this.ongoing = true;\n  //     this.timer.start(() => { this.timeout() });\n  //     var numOfTeams = this.setupTeams(); console.log(numOfTeams);\n  //     var colors = DeepSpaceGame.colorCombinations.get(numOfTeams).sample().shuffle().map(e => DeepSpaceGame.colors[e]);\n  //     var players = [], counter = 0;\n  //     var block = (id, p, i) => {\n  //       // p.team = i%numOfTeams;\n  //       return { name: p.name, team: p.team, index: i, id: id, type: p.type }\n  //     };\n  //     Array.from(this.players).shuffle().forEach(entry => {\n  //       let [id, player] = entry;\n  //       players.push(block(id, player, counter++));\n  //     });\n  //     this.setupData = {\n  //       teams: numOfTeams,\n  //       colors: colors,\n  //       players: players,\n  //       state: this.state,\n  //       disconnects: [],\n  //       tint: TINT.shuffle()\n  //     };\n  //\n  //     for (let [id, player] of this.players) player.ready = false;\n  //     for (let i = 0; i < numOfTeams; i++) this.state.scores.push({t:i, s:100});\n  //   }\n  //   this.setupData.duration = this.timer.timeLeft - COUNTDOWN_DURATION;\n  //   return this.setupData;\n  // }\n\n  // setupTeams() {\n  //   // private matches distribute teams freely\n  //   if(this.type == 'practice') this.max_teams = 1; // TODO: fix.. not good\n  //   return (this.type == 'private') ? this.freeTeamCountSetup() : this.explicitTeamCountSetup();\n  // }\n  //\n  // explicitTeamCountSetup() {\n  //   Array.from(this.players).shuffle().forEach((entry, i) => {\n  //     let [, player] = entry;\n  //     player.team = i % this.max_teams;\n  //   });\n  //   return this.max_teams;\n  // }\n  //\n  // freeTeamCountSetup() {\n  //   let teams = [];\n  //   for (let i = 0; i < this.max_teams; i++) teams.push([]);\n  //   // first players that have explicitly chosen a team get assigned to it (if valid)\n  //   for (let [, player] of this.players) {\n  //     if(player.team < this.max_teams && player.team >= 0) {\n  //       teams[player.team].push(player);\n  //     } else {\n  //       player.team = -1;\n  //     }\n  //   }\n  //\n  //   // then empty teams are removed\n  //   teams = teams.filter(arr => arr.length != 0); // console.log(teams.map(arr => arr.length)); console.log(teams.map(arr => arr.map(player => player.name)));\n  //\n  //   // and every player without a team gets its own team\n  //   for (let [, player] of this.players)\n  //     if(player.team == -1)\n  //       teams.push([player]);\n  //\n  //   // players are given their final (and now organized) team number\n  //   teams.forEach( (team, i) => {\n  //     for(let player of team)\n  //       player.team = i;\n  //   });\n  //\n  //   return teams.length;\n  // }\n  //\n  // get ready() {\n  //   for (let [id, player] of this.players) { // console.log(`${player.userid} : ${player.ready}`);\n  //     if(!player.ready) return false;}\n  //   return true;\n  // }\n\n  // playerCleared(player) {\n  //   return !(!player.type || player.name.empty())\n  // }\n\n  \n  get sustainable() {\n    return this.playersMap.size >= this.required_players;\n  }\n\n  get unsustainable() {\n    var unsus = this.playersMap.size < (this.limit == 1 ? 1 : 2 ); // console.log(`unsustainable: ${unsus}`);\n    if(unsus) return true;\n    return false;\n  }\n\n  active(userid) {\n    return this.playersMap.has(userid);\n  }\n\n\n\n  setWinForPlayers([scores, results]) {\n\n    // let winningTeam = 0;\n    // if(this.type != 'public') return;\n    // // if no winning team index is presented, one is deducted using the current scores\n    // // if(typeof winningTeam === 'undefined') {\n    // //   if(this.state.scores.length != 0) {\n    // //     winningTeam = this.state.scores.shuffle().sort((a,b) => a.s-b.s)[0].t;\n    // //   } else {\n    // //     winningTeam = Math.floor(Math.random()*this.setupData.teams);\n    // //     `no scores were registered!!`.yellow();\n    // //   }\n    // // }\n    // winningTeam = winningTeam || this.state.leadTeam;\n    // this.setupData.players.forEach((player_info)=>{\n    //   var client = this.players.get(player_info.id);\n    //   if(client && (player_info.team == winningTeam)) client.won = true;\n    // });\n\n\n    // create respective wins array\n\n    const wins = [];\n\n    switch(this.gameVars.options.mode) {\n\n      // ctf\n      case 0:\n\n        // win bool\n        var bestScore = _(scores).min();\n        scores.forEach(score => wins.push(bestScore == score))\n\n        break;\n\n      // territorial\n      case 1:\n\n        // win bool\n        var bestScore = _(scores).max();\n        scores.forEach(score => wins.push(bestScore == score));\n\n        break;\n\n    }\n\n    // access and assign depending on players team\n\n    for(let [client, data] of this.playersMap) {\n      const team = this.getTeamAndPlayerFor(client);\n      const result = results[this.getPlayerIndexForClient(client)];\n      const hits = result ? result[3] : 0;\n\n      this.lastGameResults.set(client.id_, [wins[team], hits]);\n    }\n\n  }\n\n  getTeamAndPlayerFor(client) {\n\n    if(!this.gameVars || !client || !client.id_) return;\n\n\n    const teams = this.gameVars.setupData.teams;\n    for(let i = 0; i < teams.length; i++) {\n      const players = teams[i];\n      const indexList = players.map(p => this.getIDforPlayerIndex(p));\n\n      const contains = _(indexList).contains(client.id_);\n      if(contains) return [i];\n    }\n\n  }\n\n  getIDforPlayerIndex(index) {\n    return this.gameVars.setupData.players[index][0];\n  }\n\n  getPlayerIndexForClient(client) {\n    return this.gameVars.setupData.players.map(p => p[0]).indexOf(client.id_);\n  }\n\n\n  addWinner(id) {\n    this.winners.add(id);\n  }\n\n  removeWinner(id) {\n    return this.winners.delete(id);\n  }\n\n  clearWinners() {\n    this.winners = new Set();\n  }\n\n\n\n  timeout() {\n    this.emit('request progress');\n    console.log(`flagholder team ${this.getTeam(this.state.flagHolder)} v.s. lead team ${this.state.leadTeam}`)\n    setTimeout(()=>{\n      if(this.state.overtime || this.state.flagHolder === undefined || this.getTeam(this.state.flagHolder) === this.state.leadTeam) {\n        this.ongoing = false;\n        this.finish();\n      } else {\n        this.state.overtime = true;\n        this.emit('overtime');\n        this.timer.cancel();\n        this.timer.interval = OVERTIME_DURATION;\n        this.timer.start(() => { this.timeout() });\n      }\n    }, TIME.sec(1));\n  }\n\n  finish() {\n    this.setWinForPlayers();\n    this.emit('game over');\n    this.endCurrentGame();\n    this.emit('lobby state', this.simplify());\n  }\n\n  endCurrentGame() {\n    this.clearLastGame();\n    if(this.gameOverCallback) {this.gameOverCallback(); delete this.gameOverCallback;}\n    // this.pickupNewPlayers();\n  }\n\n  clearLastGame() {\n    this.ongoing = false;\n    this.setupData = null;\n    this.state.flagHolder = undefined;\n    this.state.leadTeam = undefined;\n    this.state.scores = [];\n    this.state.overtime = false;\n    this.timer.cancel();\n    this.timer.interval = GAME_DURATION + COUNTDOWN_DURATION;\n  }\n\n  get game_lead_team() {\n    return this.state.scores.shuffle().sort((a,b) => a.s-b.s)[0].t;\n  }\n\n  getTeam(client_id) {\n    this.gameVars.setupData.teams.forEach((team, teamIndex)=>{\n      team.forEach((playerIndex)=>{\n        if(this.gameVars.setupData.players[playerIndex][0] == client_id) return teamIndex;\n      })\n    });\n    // for(let player of this.setupData.players)\n    //   if(player.id == client_id)\n    //     return player.team;\n  }\n\n\n\n  // PASSWORD\n  // format: /\\d{4}\\\n\n  setPassword(p) {\n    // validation: 4 digits\n    if(/\\d{4}/.test(p)) {\n      this._password = p;\n      return true;\n    }\n    return false;\n  }\n\n  clearPassword() { delete this._password }\n\n  testPassword(p) {\n    return this._password === p;\n  }\n\n  get locked() { return typeof this._password !== 'undefined' }\n\n\n  map() {\n    // normalization\n    // player -> [ name, rank, team, ready, ship, slots [] ]\n    const play_arr = this.mapPlayers();\n    // spectator -> name\n    const spec_arr = this.mapSpectators();\n\n    return {\n      type: this.type,\n      code: this.id,\n      password: this._password,\n      ongoing: !!this.gameVars,\n      game_settings: this.mapSettings(),\n      users: this.mapUsers()\n    };\n  }\n  mapUsers() { return {players: this.mapPlayers(), spectators: this.mapSpectators()}}\n  mapPlayers() { return Array.from(this.playersMap).map(c => [c[0].id_, ...c[1]]) }\n  mapSpectators() { return Array.from(this.spectators).map(c => c.name || c.id_).filter(str => str); }\n  mapSettings() {\n\n    const settings = {\n      editableSettings: {},\n      noneditableSettings: {},\n    };\n\n    _(this.options).each((val, key)=>{\n      if(_(this.editableSettings).contains(key)) {\n        settings.editableSettings[key] = val\n      } else {\n        settings.noneditableSettings[key] = val\n      }\n    });\n\n    return settings;\n  }\n\n\n  // network and game functions\n\n  exec(msg, data, client) {\n    this.gameVars ? this[msg](data, client) : 0; // if active run\n  }\n\n  shipUpdated(data, client) {\n    // reflect message\n    this.broadcast('shipUpdated', data, client)\n  }\n\n  shipOverridden(data, client) {\n    // reflect message\n    this.broadcast('shipOverridden', data, client)\n  }\n\n  shipHPAdjusted(data, client) {\n    // reflect message\n    this.broadcast('shipHPAdjusted', data, client)\n\n    // log to game records\n    const [, hp, fromID] = data;\n    this.gameVars.modeLogic.playerRecordsHPGivenIncrement(fromID, hp);\n  }\n\n  bulletCreated(data, client) {\n    // reflect message\n    this.broadcast('bulletCreated', data, client)\n  }\n\n  bulletDestroyed(data, client) {\n    // reflect message\n    this.broadcast('bulletDestroyed', data, client)\n  }\n\n  blockCreated(data, client) {\n    // reflect message\n    this.broadcast('blockCreated', data, client);\n\n    // notify logic\n    if(this.gameVars.options.mode == 1) {\n      const {id, team} = data;\n      this.gameVars.modeLogic.addBlockForTeam(id, team);\n    }\n  }\n\n  blockHPAdjusted(data, client) {\n    // reflect message\n    this.broadcast('blockHPAdjusted', data, client)\n  }\n\n  blockTeamSet(data, client) {\n    // reflect message\n    this.broadcast('blockTeamSet', data, client);\n\n    if(this.gameVars.options.mode == 1) {\n      const [id, team] = data;\n      this.gameVars.modeLogic.setBlockTeam(id, team);\n    }\n  }\n\n  blockDestroyed(data, client) {\n    // reflect message\n    this.broadcast('blockDestroyed', data, client)\n\n    // notify logic\n    if(this.gameVars.options.mode == 1) {\n      this.gameVars.modeLogic.removeBlock(data);\n    }\n  }\n\n  subCreated(data, client) {\n    // reflect message\n    this.broadcast('subCreated', data, client)\n  }\n\n  subDestroyed(data, client) {\n    // reflect message\n    this.broadcast('subDestroyed', data, client)\n  }\n\n  deathOccurrence(data, client) {\n    // reflect message\n    this.broadcast('deathOccurrence', data, client)\n\n    // log to game records\n    const [toID, fromID] = data;\n    this.gameVars.modeLogic.playerRecordsKillIncrement(fromID);\n    this.gameVars.modeLogic.playerRecordsDeathIncrement(toID);\n  }\n\n  // mode (ctf)\n\n  flagCaptured(id, client) {\n\n    // involve mode logic\n    const modeLogic = this.gameVars.modeLogic;\n\n    if(modeLogic.flagAvailable) {\n\n      // reflect message\n      this.broadcast('flagCaptured', id, client);\n\n      // alert mode logic\n      modeLogic.flagCaptured(id);\n\n    }\n  }\n\n  flagDropped(data, client) {\n\n    // reflect message\n    this.broadcast('flagDropped', data, client);\n\n    // notify mode logic\n    this.gameVars.modeLogic.flagDropped();\n\n  }\n\n  flagProgress(data, client) {\n\n    // interpret\n    const [team, score] = data;\n    const modeLogic = this.gameVars.modeLogic;\n\n    // notify mode logic\n    modeLogic.updateTeamScore(team, score);\n\n    // reflect message\n    this.broadcast('flagProgress', [team, modeLogic.scoreForTeam(team)], client);\n  }\n\n\n}\n\n\nclass GameLogic {\n\n  constructor(endCallback, numberOfTeams, players) {\n    this.end = endCallback;\n    this.setupPlayerRecords(players);\n\n  }\n\n  setupPlayerRecords(players) {\n\n    this.playerRecords = new Map();\n    for(let player of players)\n      // sets default record for every id\n      this.playerRecords.set(player[0], [0, 0, 0]);\n\n  }\n\n\n  // Manipulate Players Records\n\n  playerRecordsKillIncrement(id) {\n    const record = this.playerRecords.get(id);\n\n    if (record) record[0]++; // kill count\n  }\n\n  playerRecordsDeathIncrement(id) {\n    const record = this.playerRecords.get(id);\n\n    if (record) record[1]++; // death count\n  }\n\n  playerRecordsHPGivenIncrement(id, hp) {\n    const record = this.playerRecords.get(id);\n\n    if (record) record[2] += hp; // hp given\n  }\n\n  formatRecords() {\n    const recordsArray = [];\n    this.playerRecords.forEach((record, id) => recordsArray.push([id, ...record]));\n    return recordsArray;\n  }\n\n  recap() {\n    return [this.formatScores(), this.formatRecords()]\n  }\n\n}\n\n\nclass CTFModeLogic extends GameLogic {\n\n  constructor(endCallback, numberOfTeams, players) {\n    super(...arguments);\n\n    this.scores = new Array(numberOfTeams).fill(100);\n    this.playerWithFlag = null;\n\n    this.updates = 0;\n  }\n\n  flagCaptured(playersID) { this.playerWithFlag = playersID; this.updates = 0 }\n  flagDropped() { this.playerWithFlag = null; this.updates = 0 }\n  get flagAvailable() { return !this.playerWithFlag }\n  flagIsHeldBy(playersID) { return this.playerWithFlag === playersID }\n\n  updateTeamScore(team, score) {\n\n    // only one update per flag capture\n    // note: doesn't exactly validate appropriately\n    if(++this.updates > 2) {\n      console.log(`update limit exceeded!`);\n      return;\n    }\n\n    // update registry\n    if(score < 0) score = 0;\n    if(this.scores[team])\n      this.scores[team] = score;\n\n    console.log(`team score updated: TEAM(${team}) SCORE(${score})`);\n\n    // check for winner\n    if(score < 1 && !this.flagAvailable) this.end();\n\n  }\n\n  scoreForTeam(number) {\n    return this.scores[number]\n  }\n\n  formatScores() {\n    return this.scores;\n  }\n\n\n\n}\n\nclass TerritorialModeLogic extends GameLogic {\n\n  constructor(endCallback, numberOfTeams, players) {\n    super(...arguments);\n\n    this.blocks = Array.new(numberOfTeams, () => new Set());\n\n  }\n\n  addBlockForTeam(id, index) {\n    if(this.blocks[index])\n      this.blocks[index].add(id);\n  }\n\n  removeBlock(id) {\n    for(let teamCollection of this.blocks)\n      if(teamCollection.delete(id))\n        return\n  }\n\n  setBlockTeam(id, index) {\n    this.removeBlock(id);\n    this.addBlockForTeam(id, index)\n  }\n\n  formatScores() {\n    const scores = [];\n    for(let teamCollection of this.blocks)\n      scores.push(teamCollection.size);\n    return scores;\n  }\n\n}\n\nconst MODES = [CTFModeLogic, TerritorialModeLogic];\n\n\n\n\n\n\n// GAME PREF to be sent at start\n\nvar DeepSpaceGame = {};\n\nDeepSpaceGame.colors = [\n  '#FF4081', // 0 pink\n  '#FF5252', // 1 red\n  '#FFEA00', // 2 yellow\n  '#00E676', // 3 green\n  '#00B0FF', // 4 blue\n  '#BB33FF', // 5 purple AA00FF old\n  '#ECEFF1', // 6 white\n  '#90A4AE', // 7 light\n  '#37474F', // 8 dark\n  '#263238', // 9 black\n\n  // added colors\n  '#FFA33F', // 10 orange\n  '#82E600', // 11 lime\n  '#00FFE2', // 12 aqua\n  '#F93FFF', // 13 magenta\n];\n\nDeepSpaceGame.colorCombinations = new Map([\n  [1, [\n    [0], [1], [2], [3], [4], [5], [10], [11], [12], [13]\n  ]],\n  [2, [\n    [4, 0],\n    [4, 1],\n    [4, 10],\n    [4, 2],\n    [4, 11],\n    [4, 3],\n    [2, 1],\n    [2, 0],\n    [2, 5],\n    [2, 12],\n    [2, 11],\n    [2, 13],\n    [10, 12],\n    [5, 11],\n  ]],\n  [3, [\n    [4, 3, 1],\n    [4, 3, 0],\n    [4, 2, 1],\n    [4, 3, 2],\n    [0, 2, 12],\n    [2, 10, 12],\n    [2, 0, 4],\n    [2, 1, 5],\n    [11, 5, 12],\n    [11, 0, 2],\n    [11, 2, 12],\n    [11, 2, 4],\n  ]],\n  [4, [\n    [1, 2, 3, 4],\n    [0, 2, 3, 4],\n    [1, 2, 11, 4],\n    [1, 2, 4, 5],\n    [2, 1, 11, 5],\n    [0, 2, 12, 4],\n  ]],\n  [5, [\n    [1, 10, 2, 3, 4],\n    [1, 2, 3, 4, 5],\n    [2, 11, 12, 4, 5],\n    [0, 2, 12, 4, 5],\n    [0, 2, 3, 4, 5],\n    [10, 2, 3, 4, 5],\n  ]],\n  [6, [\n    [1, 10, 2, 3, 4, 5],\n    [1, 10, 2, 3, 12, 4],\n    [0, 10, 2, 3, 12, 4],\n    [0, 2, 11, 12, 4, 5],\n    [10, 2, 11, 12, 4, 5],\n  ]],\n  [7, [\n    [1, 10, 2, 3, 12, 4, 5],\n    [0, 10, 2, 3, 12, 4, 5],\n  ]],\n  [8, [\n    [0, 10, 2, 11, 12, 4, 5, 13]\n  ]]]\n);\n\nDeepSpaceGame.maps = [\n  {\n    name: \"The Event Horizon\",\n    spawn: [\n      [{x: 10, y: 10}, {x: 20, y: 20}],\n      [{x: 758, y: 1014}, {x: 748, y: 1004}]\n    ]\n  }\n];\n\nconst LIGHT = {\n  assortment: [\n    ['#0000ff', '#ff0000'],\n    ['#0000ff', '#aedc39'],\n    ['#0048ff', '#cc00ff']\n  ],\n\n  randomDraw() {\n    let [c1, c2] = LIGHT.assortment.sample();\n    return [Math.randomIntMinMax(15, 75), c1, c2];\n  }\n};\n\nconst REF = {\n  lobby: {\n    type: ['public', 'private', 'practice'],\n    typeDesc: [\n      'This is a public lobby. Players present have complete control over game settings',\n      'This is a private lobby. Players present have complete control over game settings',\n      'This is a practice lobby. Players present have complete control over game settings',\n    ]\n  },\n\n  ship: {\n    type: ['standard', 'rate', 'speed', 'defense', 'damage'],\n    typeDesc: [\n      'a tune with the world and itself, this is the balanced ship',\n      'this ship produces a stream of light bullets to trap and confuse',\n      'run your way out of any situation with the speed ship',\n      'take more than just a hit with the defense ship',\n      'this ship is feared across the reach of space, use it wisely'\n    ],\n    sub: ['attractor', 'heat seeker', 'repulsors', 'stealth', 'block bomb'],\n    stats: [\n      ['HEALTH' , '0.6', '0.6', '0.2', '1.0', '0.7'],\n      ['SPEED'  , '0.6', '0.6', '0.9', '0.4', '0.4'],\n      ['ATTACK' , '0.5', '0.4', '0.3', '0.5', '1.0'],\n      ['RANGE'  , '0.5', '0.5', '0.3', '0.7', '0.4'],\n    ]\n\n  },\n\n  results: {\n    scoringUnits: ['distance', 'amount covered', 'time lasted']\n  }\n\n};\n\n\n\n\n// class TerritorialGMLogic {\n//\n//   constructor(numberOfTeams) {\n//     this.scores = new Array(numberOfTeams);\n//     for(let i = 0; i < numberOfTeams; i++) this.scores[i] = [i, 0];\n//   }\n//\n//   inc(teamIndex) {\n//     this.scores[teamIndex][1]++;\n//   }\n//\n//   dec(teamIndex) {\n//     this.scores[teamIndex][1]--;\n//   }\n//\n//   recap() {\n//     return this.scores.sort((a, b) => b[1] - a[1])\n//   }\n//\n// }\n//\n// class CTFGMLogic {\n//\n//   constructor(numberOfTeams) {\n//     this.scores = new Array(numberOfTeams);\n//     for(let i = 0; i < numberOfTeams; i++) this.scores[i] = [i, 0];\n//   }\n//\n//   inc(teamIndex) {\n//     this.scores[teamIndex][1]++;\n//   }\n//\n//   dec(teamIndex) {\n//     this.scores[teamIndex][1]--;\n//   }\n//\n//   recap() {\n//     return this.scores.sort((a, b) => b[1] - a[1])\n//   }\n//\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodule.exports = Lobby;\n"]}