{"version":3,"sources":["../js/results.js"],"names":["RESULTS","layer_node","getLayerNode","document","querySelector","load","server_data","clear_DOM","layer","summary","interpret","mainTeam","teams","shift","resultsHead","style","background","color","outcomeResultNode","textContent","won","labelText","REF","results","modeMeasure","mode","scoreUnitLabelNode","toUpperCase","bubblesContainer","team","appendChild","createBubble","header","mainPlayersTable","createPlayerTable","resultsBodyNode","teamNode","createElement","className","layerNode","bubblesGroup","children","removeChild","playerTable","parentNode","resultsBody","ce","tagName","results_players","table","thead","tbody","headerRow","headerRowContents","length","times","headerCell","i","player","row","cell","players","bubble","score","backgroundColor","left","progress","structure","game_data","model","forEach","scores","number","push","name","kills","deaths","sort","a","b","records","colors","ENV","game","map","gameMode","progresses","respectiveWins","limit","bestScore","_","min","max","indexOfWinner","indexOf","ourTeamIndex","spectate","teamScore","index","playerRecord","teamIndexAndNameFromPlayerID","teamIndex","primaryTeam","splice","first","unshift","id","get","console","warn","fake_data"],"mappings":"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","file":"results.js","sourcesContent":["let RESULTS = {\n  layer_node: null,\n  getLayerNode: function() {\n    return this.layer_node ? this.layer_node : this.layer_node = document.querySelector('#results_layer');\n  },\n  load: function(server_data) {\n    \n    // DOM\n    this.clear_DOM();\n    const layer = this.getLayerNode();\n\n    // data\n    const summary = this.interpret(server_data);\n\n    \n    // HEADER //\n\n    // setup\n    const mainTeam = summary.teams.shift(); //team in question\n\n    // header background\n    const resultsHead = layer.querySelector('#results_head');\n    resultsHead.style.background = mainTeam.color;\n\n    // win outcome\n    const outcomeResultNode = layer.querySelector('#results_win_outcome');\n    outcomeResultNode.textContent = mainTeam.won ? 'WIN' : 'LOSE';\n\n    // scoring unit\n    const labelText = REF.results.modeMeasure[summary.mode];\n    const scoreUnitLabelNode = layer.querySelector('#results_timeline_label');\n    scoreUnitLabelNode.textContent = labelText.toUpperCase();\n\n    // add bubbles\n    const bubblesContainer = layer.querySelector('#results_timeline_bubbles');\n    for(let team of summary.teams) {\n      bubblesContainer.appendChild(this.createBubble(team));\n    }\n    bubblesContainer.appendChild(this.createBubble(mainTeam));\n\n    // add main team player's table\n    const header = document.querySelector('#results_head_content');\n    const mainPlayersTable = this.createPlayerTable(mainTeam);\n    header.appendChild(mainPlayersTable);\n\n\n\n    // BODY //\n\n    const resultsBodyNode = layer.querySelector('#results_body');\n    for(let team of summary.teams) {\n      const teamNode = document.createElement('div');\n      teamNode.className = 'results_team';\n      teamNode.style.color = team.color;\n\n      teamNode.appendChild(this.createBubble(team));\n      teamNode.appendChild(this.createPlayerTable(team));\n\n      resultsBodyNode.appendChild(teamNode);\n    }\n\n\n\n    // summary.forEach((team, i)=>{\n    //   var results_team = document.createElement('div'),\n    //       results_team_win_state = document.createElement('span'),\n    //       results_team_score = document.createElement('span'),\n    //       results_players = document.createElement('div');\n    //   var {r, g, b} = COLOR.hexToRgb(team.color);\n    //   var RGBAcolor = `rgba(${r}, ${g}, ${b}, 0.3)`;\n    //\n    //   results_team.className = 'results_team';\n    //   results_team_win_state.className = 'results_team_win_state';\n    //   results_team_win_state.textContent = i == 0 ? 'WIN' : 'LOSE';\n    //   results_team_win_state.style.color = team.color;\n    //   results_team_score.className = 'results_team_score';\n    //   results_team_score.textContent = team.score;\n    //   results_players.className = 'results_players';\n    //\n    //   team.players.forEach((player)=>{\n    //     var results_player = document.createElement('span'),\n    //         results_player_name = document.createElement('span'),\n    //         results_player_score = document.createElement('span');\n    //\n    //     results_player.className = 'results_player';\n    //     results_player.style.backgroundColor = RGBAcolor;\n    //     results_player_name.className = 'results_player_name';\n    //     results_player_name.textContent = player[0];\n    //     results_player_score.className = 'results_player_score';\n    //     results_player_score.textContent = `${player[1]}+ ${player[2]}-`;\n    //\n    //     results_player.appendChild(results_player_name);\n    //     results_player.appendChild(results_player_score);\n    //\n    //     results_players.appendChild(results_player);\n    //   });\n    //\n    //   results_team_win_state.appendChild(results_team_score);\n    //   results_team.appendChild(results_team_win_state);\n    //   results_team.appendChild(results_players);\n    //\n    //   layer.appendChild(results_team);\n    // })\n\n  },\n  clear_DOM: function() {\n    const layerNode = this.getLayerNode();\n\n    const bubblesGroup = layerNode.querySelector('#results_timeline_bubbles');\n    while(bubblesGroup.children[0]) bubblesGroup.removeChild(bubblesGroup.children[0]);\n\n    const playerTable = bubblesGroup.parentNode.parentNode.parentNode.querySelector('.results_players');\n    if(playerTable) playerTable.parentNode.removeChild(playerTable);\n\n    const resultsBody = layerNode.querySelector('#results_body');\n    while(resultsBody.children[0]) resultsBody.removeChild(resultsBody.children[0]);\n\n  },\n\n  createPlayerTable(team) {\n\n    const ce = tagName => document.createElement(tagName);\n\n    // root and table elements\n    const results_players = ce('div');\n    const table = ce('table');\n    const thead = ce('thead');\n    const tbody = ce('tbody');\n    results_players.className = 'results_players';\n\n\n    // header\n    const headerRow = ce('tr');\n    const headerRowContents = ['', 'KILLS', 'DEATHS', 'HITS'];\n    headerRowContents.length.times(i => {\n      const headerCell = ce('th');\n      headerCell.textContent = headerRowContents[i];\n      headerRow.appendChild(headerCell);\n    });\n    thead.appendChild(headerRow);\n\n    // player rows\n    for(let player of team.players) {\n      const row = ce('tr');\n      player.length.times(i => {\n        const cell = ce('th');\n        cell.textContent = player[i];\n        row.appendChild(cell);\n      });\n      tbody.appendChild(row);\n    }\n\n    // hookup and connect\n    table.appendChild(thead);\n    table.appendChild(tbody);\n\n    results_players.appendChild(table);\n\n    return results_players;\n    // var {r, g, b} = COLOR.hexToRgb(team.color);\n    // var RGBAcolor = `rgba(${r}, ${g}, ${b}, 0.3)`;\n\n\n  },\n\n\n  createBubble(team) {\n    const bubble = document.createElement('span');\n\n    bubble.className = 'results_timeline_bubble';\n    bubble.textContent = team.score;\n    bubble.style.backgroundColor = team.color;\n    bubble.style.left = team.progress + '%';\n\n    return bubble\n  },\n\n\n  // returns this format [{color: '#333233', score: 90, players: [['joan', 4, 5], ['billy', 4, 5]]}, [['acp', 1, 3], ['cake', 3, 4]]]\n  structure(game_data) {\n    var summary = [];\n    var [model, teams] = game_data;\n    teams.forEach((team)=>{\n      var color = team.color,\n          score = 100 - model.scores[team.number],\n          players = [];\n      team.players.forEach((player) => {\n        players.push([player.name, player.score.kills, player.score.deaths]);\n      });\n      players.sort((a, b) => b[1] - a[1]);\n      summary.push({color, score, players});\n    });\n    summary.sort((a, b) => b.score - a.score );\n    return summary;\n  },\n\n  interpret([scores, records]){\n\n    // reference materials\n    const colors = ENV.game.teams.map(team => team.color);\n    const mode = ENV.game.gameMode;\n\n    // score to progress and win conversion\n    const progresses = [];\n    const respectiveWins = [];\n    switch(mode) {\n\n      // ctf\n      case 0:\n\n        // progresses\n        const limit = 100;\n        scores.forEach(score => progresses.push(limit - score))\n\n        // win bool\n        var bestScore = _(scores).min();\n        scores.forEach(score => respectiveWins.push(bestScore == score))\n\n        break;\n\n      // territorial\n      case 1:\n\n        // progresses\n        var bestScore = _(scores).max();\n        scores.forEach(score => progresses.push(100 * score / bestScore))\n\n        // win bool\n        scores.forEach(score => respectiveWins.push(bestScore == score))\n\n        break;\n\n    }\n\n    const indexOfWinner = _(respectiveWins).indexOf(true);\n    const ourTeamIndex = ENV.spectate ? indexOfWinner : ENV.game.team.number;\n\n\n\n    // creation of summary\n    const summary = {};\n    summary.mode = mode;\n    summary.teams = [];\n    scores.forEach((teamScore, index) => {\n\n      // root\n      const team = {};\n\n      team.color = colors[index]; // color\n      team.score = scores[index]; // score\n      team.progress = progresses[index]; // progress\n      team.won = respectiveWins[index]; // wins\n\n      team.players = [];\n\n      // stack onto summary\n      summary.teams.push(team);\n\n    });\n    \n    // add player records to respective teams\n    for(let playerRecord of records) {\n      const [teamIndex, name] = this.teamIndexAndNameFromPlayerID(playerRecord[0])\n      playerRecord[0] = name;\n      summary.teams[teamIndex].players.push(playerRecord);\n    }\n\n\n    // rearrange primary team on top\n    const primaryTeam = summary.teams.splice(ourTeamIndex, 1).first();\n    summary.teams.unshift(primaryTeam);\n\n\n    return summary;\n\n  },\n\n  teamIndexAndNameFromPlayerID(id) {\n\n    const player = ENV.game.players.get(id);\n\n    if(player) {\n\n      let teamIndex = player.team.number;\n      let name = player.name;\n      \n      return [teamIndex, name];\n\n    } else {\n      console.warn(`RESULTS:: player ID not found (${id})`)\n    }\n\n  }\n\n\n};\n\n\nconst fake_data = [\n  {\n    color: '#00B0FF',\n    score: '∞',\n    progress: 100,\n    won: true,\n    players: [\n      ['david', 12, 15, 123],\n      ['isabel', 10, 3, 152],\n          ['john', 12, 15, 123],\n          ['grill', 10, 3, 152],\n    ],\n  },\n  // {\n  //   color: '#00FFE2',\n  //   score: 178,\n  //   progress: 100,\n  //   won: true,\n  //   players: [\n  //     ['john', 12, 15, 123],\n  //     ['grill', 10, 3, 152],\n  //   ],\n  // },\n  // {\n  //   color: '#FFEA00',\n  //   score: 120,\n  //   progress: 67,\n  //   won: false,\n  //   players: [\n  //     ['sam', 12, 15, 123],\n  //     ['nancy', 10, 3, 152],\n  //   ],\n  // },\n  // {\n  //   color: '#00B0FF',\n  //   score: 78,\n  //   progress: 44,\n  //   won: false,\n  //   players: [\n  //     ['shakespear', 12, 15, 123],\n  //     ['underface', 10, 3, 152],\n  //   ],\n  // },\n  {\n    color: '#82E600',\n    score: 4.3,\n    progress: 90,\n    won: false,\n    players: [\n      ['shakespear', 12, 15, 123],\n      ['underface', 10, 3, 152],\n          ['sam', 12, 15, 123],\n          ['nancy', 10, 3, 152],\n    ],\n  },\n  {\n    color: '#FFEA00',\n    score: 1.7,\n    progress: 32,\n    won: false,\n    players: [\n      ['shakespear', 12, 15, 123],\n    ],\n  },\n];\n// RESULTS.load(fake_data);\n"]}