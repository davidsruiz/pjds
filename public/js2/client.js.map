{"version":3,"sources":["../js/client.js"],"names":["Network","Lobby","info","type","code","password","game_settings","map","player_capacity","mode","stock","players","spectators","socketSetup","socket","io","connect","on","alert","a","auth","connected","playerAdded","playerUpdated","playerRemoved","spectatorAdded","spectatorUpdated","spectatorRemoved","updateMap","disconnected","lobbyID","window","location","pathname","slice","data","ENV","user","id","name","emit","prompt","lobby_ui","initReact","shipType","$","lobby","LobbyUI","regex","validation","test","swearjar","profane","trim","resolve","max_team_count","solo_option","ReactDOM","render","document","getElementById"],"mappings":"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","file":"client.js","sourcesContent":["\n\n\n\n\n\nclass Network {\n\n  constructor() {\n\n  }\n\n  // connect to server using id and name\n\n  connect() {\n\n  }\n\n}\n\nclass Lobby {\n\n  constructor() {\n\n    this.info = {\n      type: null,\n      code: null,\n      password: null,\n      game_settings: {\n        map: null,\n        player_capacity: null,\n        mode: null,\n        stock: null\n      },\n      players: [\n        // {name, rank, team, ready, ship, slots []}\n      ],\n      spectators: [\n        // {name?}\n      ]\n    };\n\n    this.socketSetup();\n\n  }\n\n  socketSetup() {\n    let socket = this.socket = io.connect();\n\n    socket.on('pie', ()=>{alert('received')});\n\n    // setting up responses`\n\n    // connect -> auth\n    // connect -> connected\n    socket.on('auth', (a)=>this.auth(a));\n    socket.on('connected', (a)=>this.connected(a));\n\n    socket.on('playerAdded', (a)=>this.playerAdded(a));\n    socket.on('playerUpdated', (a)=>this.playerUpdated(a));\n    socket.on('playerRemoved', (a)=>this.playerRemoved(a));\n\n    socket.on('spectatorAdded', (a)=>this.spectatorAdded(a));\n    socket.on('spectatorUpdated', (a)=>this.spectatorUpdated(a));\n    socket.on('spectatorRemoved', (a)=>this.spectatorRemoved(a));\n\n    socket.on('updateMap', (a)=>this.updateMap(a));\n\n    socket.on('disconnected', (a)=>this.disconnected(a));\n\n  }\n\n\n  connect() {\n\n    // connect to specific lobby presenting id and name\n    let lobbyID = window.location.pathname.slice(1),\n        // [lobby_id, user_id, user_name];\n\n        data = [lobbyID, ENV.user.id, ENV.user.name];\n\n    this.socket.emit('connect', data);\n  }\n\n  auth() {\n\n    let password = window.prompt('This lobby requires a password. Enter it here:');\n\n    // connect to specific lobby presenting id and name\n    let lobbyID = window.location.pathname.slice(1),\n      // [lobby_id, user_id, user_name];\n      data = [lobbyID, password];\n\n    this.socket.emit('auth', data);\n  }\n\n  connected(data) {\n    // data [user_id, lobby_object]\n\n    ENV.user.id = data[0];\n\n    this.info = data[1];\n\n    // ENV.UI.init();\n    ENV.lobby_ui.initReact();\n  }\n\n  join(shipType) {\n\n    // the prerequisits for joining are:\n    // {name, rank, team, ready, ship, slots []}\n\n    // connect to specific lobby presenting id and name\n    let lobbyID = window.location.pathname.slice(1),\n      // [lobby_id, user_id, user_name];\n\n      data = [lobbyID, ENV.user.id, ENV.user.name, false, ];\n\n    this.socket.emit('connect', data);\n\n  }\n\n  playerAdded() {}\n\n  playerUpdated() {}\n\n  playerRemoved() {}\n\n  updateMap() {}\n\n  disconnected() {}\n\n  setPassword() {}\n  passwordSet() {}\n\n}\n\n\n\n\n$(()=>{\n\n  // A client loads a lobby page..\n\n  //-1. instantiate lobby (app)\n    ENV.lobby = new Lobby();\n    ENV.lobby_ui = new LobbyUI();\n\n  // 0. open a connection with server\n    ENV.lobby.connect();\n\n  // 1. a valid id and valid name is sent\n  //    response is either lobby data or denial\n  //    remains in limbo state with frame only but not active\n\n  // 2. if game is active, client is asked about continuing\n  //    once accepted, lobby information is sent to client\n  //    option to join is available\n\n  // 3. request to join is sent\n  //    response is either unable or simply success\n\n  // 4. upon joining, player information is sent and options locked\n  //\n\n\n  //    popup handling place?\n\n\n});\n\n\n\n\n\n\n\n// handles lobby code about ui\nclass LobbyUI {\n\n  constructor() {}\n\n  get_name() {\n\n    const\n      regex = /^(\\w|\\s)+$/,\n      validation = name => {\n        // only alphanumeric and whitespace characters\n        if(!(/^(\\w|\\s)+$/.test(name))) return false;\n\n        // no profanity\n        if(swearjar.profane(name)) return false;\n\n        return true;\n      };\n\n    let name = ENV.user.name;\n    while(!name || (name.trim()===\"\") || !validation(name)) {\n      name = window.prompt('please enter a display name');\n    }\n\n    this.name = name.trim();\n    resolve(name);\n\n\n\n  }\n\n  get_team(max_team_count, solo_option) {}\n\n\n  initReact() {\n    ReactDOM.render(\n      <DSGameLobby data={ENV.lobby.info} />,\n      document.getElementById('container')\n    );\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n\n\n\n\n\n// NETWORK INTERACTION\n\n// CONNECT TO server\nlet socket = io.connect();\n\nsocket.on('onconnected', function(obj) {\n  if(ENV.user.id === undefined) ENV.user.id = obj.id;\n  socket.emit('userid', ENV.user.id);\n  ENV[\"id\"] = ENV.user.id;\n\n  // REQUEST JOIN lobby\n  let lobbyID = window.location.pathname.slice(1);\n  socket.emit('join lobby', lobbyID);\n\n  // send stored info\n  let name = ENV.storage.user_name || \"\";\n  socket.emit('set name', name);\n\n  let type = ENV.storage.type || \"standard\"; // TODO: double hard-coded see view.js:36\n  if(type) socket.emit('set type', type);\n\n  // if(sessionStorage.ready = !!(sessionStorage.nickname && sessionStorage.type)) socket.emit('ready');\n\n  LOBBY.setupLink();\n  LOBBY.focusOnInput();\n});\n\nsocket.on('lobby joined', lobby_type => {\n  if(lobby_type == 'private') {\n    let team = ENV.storage.team || -1; // TODO: double hard-coded see view.js:36\n    if(team) socket.emit('set team', team);\n  }\n})\n\n// handle errors\nsocket.on('error', msg => log(msg));\nsocket.on('game error', msg => LOBBY.disconnect(msg));\n\n// on join lobby\nlet editing;\nsocket.on('lobby state', lobby => {\n  // log(`lobby state`);\n  // log(lobby.players);\n  ENV[\"lobby\"] = lobby;\n  let me = lobby.players[ENV.storage.id];\n  if(me) ENV.user.name = me.name;\n  if(!editing) refreshLobbyView();\n});\n\nsocket.on('spectate', function() {\n  if(confirm(\"This lobby is closed. Join as a spectator?\")) {\n    ENV[\"spectate\"] = true;\n  } else {\n    window.location.reset()\n  }\n});\n\nsocket.on('ready', () => {\n  // LOBBY.disableInput();\n});\n\n// socket.on('disconnect', () => LOBBY.disconnect(`you are no longer connected`));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// NEEDS WORK\nlet CODE = {};\n\n// START game\n\nCODE.start_game = function(data) {\n\n  if(!ENV.lobby) { setTimeout(()=>{CODE.start_game(data)}, 100); return; }\n\n  recordHistory(data);\n\n  data.spectate = !!ENV[\"spectate\"];\n  ENV.sound.stop('chill');\n  if(ENV.lobby.type == 'public' && !ENV.spectate) ENV.storage.ongoing = 'true';\n  if(!ENV.storage.first_game  && !ENV.spectate) { ENV.help.drawer.expand(); ENV.help.carousel.start(); ENV.storage.first_game = true; }\n  g = ENV.game = DeepSpaceGame.create(data);\n  LOBBY.startCountdown(()=>{\n    PARTICLES.stop();\n    LOBBY.showHelpButton();\n  \tENV.game.start();\n  \tLOBBY.refreshClock();\n  })\n};\n\nsocket.on('start', CODE.start_game);\n\n// during game\n\n// socket.on('input stack', (data) => NetworkHelper.in_input_stack(data));\nsocket.on('ship update', (data) => NetworkHelper.in_ship_update(data));\nsocket.on('ship override', (data) => NetworkHelper.in_ship_override(data));\nsocket.on('bullet create', (data) => NetworkHelper.in_bullet_create(data));\nsocket.on('bullet destroy', (data) => NetworkHelper.in_bullet_destroy(data));\nsocket.on('ship damage', (data) => NetworkHelper.in_ship_damage(data));\nsocket.on('block create', (data) => NetworkHelper.in_block_create(data));\nsocket.on('block destroy', (data) => NetworkHelper.in_block_destroy(data));\nsocket.on('block damage', (data) => NetworkHelper.in_block_damage(data));\nsocket.on('block change', (data) => NetworkHelper.in_block_change(data));\n\nsocket.on('sub create', (data) => NetworkHelper.in_sub_create(data));\nsocket.on('sub destroy', (data) => NetworkHelper.in_sub_destroy(data));\n\nsocket.on('flag pickup', (data) => NetworkHelper.in_flag_pickup(data));\nsocket.on('flag drop', (data) => NetworkHelper.in_flag_drop(data));\n\nsocket.on('msg ship kill', (data) => NetworkHelper.in_msg_ship_kill(data));\n\nsocket.on('stop', () => delete DeepSpaceGame.runningInstance);\n\nsocket.on('game over', (data) => NetworkHelper.end_game());\nsocket.on('request progress', (data) => NetworkHelper.request_local_progress());\nsocket.on('overtime', () => NetworkHelper.go_overtime());\n\nsocket.on('disconnect player', (userid) => NetworkHelper.in_disconnect_player(userid));\n\nfunction recordHistory(data) {\n  let pp = ENV.storage.getItem(\"previous_players\");\n\n  if(pp) { pp = JSON.parse(pp).toSet() } else { pp = new Set() }\n  for(let player of data.players) if(player.id !== ENV[\"id\"]) {pp.delete(player.id); pp.add(player.id);}//pp.add(`${player.id}::${player.name}`);\n\n  ENV.storage.setItem(\"previous_players\", JSON.stringify(pp.toArray()));\n}\n*/"]}