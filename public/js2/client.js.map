{"version":3,"sources":["../js/client.js"],"names":["Lobby","info","type","code","password","game_settings","map","player_capacity","mode","stock","players","spectators","user","isJoined","isReady","team","socketSetup","network","GameNetworkAdapter","socket","window","onbeforeunload","e","beforeExit","io","connect","on","alert","msg","console","error","a","auth","connected","passwordSet","passwordCleared","joined","lobbyFull","starting","lobbyUpdate","usersUpdate","playersUpdate","optionsUpdate","rotationUpdate","gameStarted","gameEnded","disconnect","shouldChangeLobby","lobbyID","location","pathname","slice","data","ENV","id","name","emit","prompt","history","back","lobby_ui","render","lobbyType","join","addListener","serverUpdate","UA","getName","getTeam","get_rank","then","rank","catch","shipType","newLobbyData","newUsersData","users","key","value","editableSettings","rotation","nextChange","p","getPassword","setupData","ongoing","spectate","game","DeepSpaceGame","create","friends","addHistory","_","reject","listen","LOBBY","startCountdown","start","refreshClock","results","log","stopListening","end","hideGame","RESULTS","updateUserWithResults","setTimeout","showResults","TIME","sec","simple_rank","reason","reload","newLobbyID","origin","isOngoing","isPlaying","isPublicLobby","storage","$","Friends","lobby","LobbyUI","regex","validation","test","swearjar","profane","trim","resolve","max_team_count","noneditableSettings","maxTeams","solo_option","result","userCanceledDialog","isNotANumber","isNaN","Number","isUnderBounds","isOverBounds","ReactDOM","document","getElementById"],"mappings":"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","file":"client.js","sourcesContent":["\n// client.js\n// by David Ruiz\n// Copyright DEEP SPACE All Rights Reserved 2017\n\n\nclass Lobby {\n\n  constructor() {\n\n    this.info = {\n      type: null,\n      code: null,\n      password: null,\n      game_settings: {\n        map: null,\n        player_capacity: null,\n        mode: null,\n        stock: null\n      },\n      players: [\n        // {name, rank, team, ready, ship, slots []}\n      ],\n      spectators: [\n        // {name?}\n      ]\n    };\n\n    this.user = {\n      isJoined: false,\n      isReady: false,\n      team: null,\n    };\n\n    this.socketSetup();\n    this.network = new GameNetworkAdapter(null, this.socket);\n\n    window.onbeforeunload = (e) => this.beforeExit(e);\n\n  }\n\n  socketSetup() {\n    let socket = this.socket = io.connect();\n\n    socket.on('pie', ()=>{alert('received')});\n    socket.on('error', (msg)=>{console.error(`server error -- ${msg}`)});\n\n    // setting up responses`\n\n    // connect -> auth\n    // connect -> connected\n    socket.on('auth', (a)=>this.auth(a));\n    socket.on('connected', (a)=>this.connected(a));\n    socket.on('passwordSet', (a)=>this.passwordSet(a));\n    socket.on('passwordCleared', (a)=>this.passwordCleared(a));\n\n    socket.on('joined', (a)=>this.joined(a));\n    socket.on('lobbyFull', (a)=>this.lobbyFull(a));\n    socket.on('starting', (a)=>this.starting(a));\n\n    socket.on('lobbyUpdate', (a)=>this.lobbyUpdate(a));\n    socket.on('usersUpdate', (a)=>this.usersUpdate(a));\n    socket.on('playersUpdate', (a)=>this.playersUpdate(a));\n    socket.on('optionsUpdate', (a)=>this.optionsUpdate(a));\n    socket.on('rotationUpdate', (a)=>this.rotationUpdate(a));\n\n    socket.on('gameStarted', (a)=>this.gameStarted(a));\n    socket.on('gameEnded', (a)=>this.gameEnded(a));\n\n    socket.on('disconnect', (a)=>this.disconnect(a));\n    socket.on('shouldChangeLobby', (a)=>this.shouldChangeLobby(a));\n  }\n\n\n  connect() {\n\n    // connect to specific lobby presenting id and name\n    let lobbyID = window.location.pathname.slice(1),\n        // [lobby_id, user_id, user_name];\n\n        data = [lobbyID, ENV.user.id, ENV.user.name];\n\n    this.socket.emit('connect', data);\n  }\n\n  auth() {\n\n    let password = window.prompt('This lobby requires a password. Enter it here:');\n\n    // if dialog was canceled, return home\n    if(password === null) {\n      history.back();\n      return;\n    }\n    \n    // connect to specific lobby presenting id and name\n    let lobbyID = window.location.pathname.slice(1),\n      // [lobby_id, user_id, user_name];\n      data = [lobbyID, password];\n\n    this.socket.emit('auth', data);\n  }\n\n  connected(data) {\n    // data [user_id, lobby_object]\n\n    ENV.user.id = data[0];\n\n    this.info = data[1];\n\n    // ENV.UI.init();\n    ENV.lobby_ui.render();\n\n    // NOTE NOTE NOTE: if the lobby is public or private automatically join as\n    // there was always room for you as intended.\n    const lobbyType = this.info.type;\n    if(lobbyType == 0 || lobbyType == 2) this.join();\n\n    if(lobbyType === 0) ENV.user.addListener('serverUpdate', data => this.serverUpdate(data))\n  }\n\n  join() {\n\n    // OLD\n    // the prerequisits for joining are:\n    // {name, rank, team, ready, ship, slots []}\n\n    // NEW\n    // the prerequisits for joining are:\n    // {name, rank, team}\n\n    // :name\n    if(!ENV.user.name) ENV.UA.getName();\n\n    // :team\n    switch(this.info.type) {\n      case 0: // public\n        this.user.team = null;\n        break;\n      case 1: // private\n        if((this.user.team = ENV.lobby_ui.getTeam()) === null) return;\n        break;\n      case 2: // practice\n        this.user.team = 0;\n        break;\n    }\n\n    // :rank\n    ENV.user.get_rank.then(rank => {\n\n      let data = [ENV.user.name, rank, this.user.team];\n      this.socket.emit('join', data);\n\n    }).catch(()=>{\n      alert('An error occurred...')\n    });\n\n\n    // connect to specific lobby presenting id and name\n    // let lobbyID = window.location.pathname.slice(1),\n    //   // [lobby_id, user_id, user_name];\n    //\n    //   data = [ENV.user.name, shipType];\n    //\n    // this.socket.emit('join', data);\n\n  }\n\n  joined() {\n    this.user.isJoined = true;\n    ENV.lobby_ui.render();\n  }\n\n  lobbyFull() {\n    ENV.lobby_ui.render();\n  }\n\n  start(shipType) {\n\n    // future prerequisits for starting are:\n    // {shipType, [slots]}\n\n    // the prerequisits for starting are:\n    // {shipType}\n\n    this.socket.emit('start', shipType);\n\n  }\n\n  starting() {\n    this.user.isReady = true;\n    ENV.lobby_ui.render();\n  }\n\n  lobbyUpdate(newLobbyData) {\n    this.info = newLobbyData;\n    ENV.lobby_ui.render();\n  }\n\n  usersUpdate(newUsersData) {\n    this.info.users = newUsersData;\n    ENV.lobby_ui.render();\n  }\n\n  playersUpdate(newUsersData) {\n    this.info.users.players = newUsersData;\n    ENV.lobby_ui.render();\n  }\n\n  updateOptions(key, value) {\n    const data = [key, value];\n    this.socket.emit('updateOptions', data);\n  }\n\n  optionsUpdate(data) {\n    const [key, value] = data;\n    this.info.game_settings.editableSettings[key] = value;\n    ENV.lobby_ui.render();\n  }\n\n  rotationUpdate(data) {\n    const {rotation, nextChange} = data;\n    this.info.rotation = rotation;\n    this.info.nextChange = nextChange;\n    ENV.lobby_ui.render();\n  }\n\n  setPassword() {\n\n    const p = ENV.lobby_ui.getPassword();\n    if(p) {\n      this.socket.emit('setPassword', p);\n    }\n\n  }\n\n  passwordSet(password) {\n    this.info.password = password;\n    ENV.lobby_ui.render();\n  }\n\n  clearPassword() {\n    this.socket.emit('clearPassword');\n  }\n  \n  passwordCleared() {\n    this.info.password = null;\n    ENV.lobby_ui.render();\n  }\n\n\n\n  // on game start\n  gameStarted(setupData) {\n\n    this.info.ongoing = true;\n\n    ENV.spectate = !this.user.isJoined;\n    ENV.game = DeepSpaceGame.create(setupData, this.network);\n    ENV.friends.addHistory(_(setupData.players).reject(p => p[0] === ENV.user.id).map(p => [p[0], p[1]]));\n    this.network.listen();\n\n    LOBBY.startCountdown(()=>{\n      ENV.game.start();\n      LOBBY.refreshClock();\n    })\n  }\n\n  gameEnded(results) {\n\n    console.log(results);\n\n    this.user.isReady = false;\n    this.info.ongoing = false;\n\n    this.network.stopListening();\n\n    ENV.game.end();\n    LOBBY.hideGame();\n    if(this.info.type === 0) RESULTS.updateUserWithResults(results);\n\n    console.log(results);\n\n    setTimeout(() => {\n\n      LOBBY.showResults(results);\n\n    }, TIME.sec(2));\n\n    // this.game.end();\n  }\n\n  serverUpdate(data) {\n    const {simple_rank} = data;\n    this.socket.emit('updateRank', simple_rank);\n  }\n\n\n  disconnect(reason) {\n    // window.alert('You have been disconnected');\n    // window.location.reset();\n    // window.location.replace(window.location.origin);\n    // window.history.pushState({}, 'home', '/');\n\n    window.location.reload();\n\n  }\n\n  shouldChangeLobby(lobbyID) {\n    this.newLobbyID = lobbyID;\n  }\n\n  changeLobby() {\n    window.location = `${window.location.origin}/${this.newLobbyID}`;\n  }\n\n\n  beforeExit(e) {\n\n    // as a user closes the window..\n    // - record if they leave a team alone\n    const isOngoing = this.info.ongoing;\n    const isPlaying = this.user.isJoined;\n    const isPublicLobby = this.info.type == 0;\n    if(isOngoing && isPlaying && isPublicLobby)\n      ENV.storage.ongoing = true; // save in local storage TODO revise\n\n\n    // const dialogText = 'Leave battle? You will lose rank points';\n    // e.returnValue = dialogText;\n    // return dialogText;\n\n    return null;\n\n  }\n\n}\n\n\n\n\n$(()=>{\n\n  // A client loads a lobby page..\n\n  //-1. instantiate lobby (app)\n    ENV.friends = new Friends();\n    ENV.lobby = new Lobby();\n    ENV.lobby_ui = new LobbyUI();\n\n  // 0. open a connection with server\n    ENV.lobby.connect();\n\n  // 1. a valid id and valid name is sent\n  //    response is either lobby data or denial\n  //    remains in limbo state with frame only but not active\n\n  // 2. if game is active, client is asked about continuing\n  //    once accepted, lobby information is sent to client\n  //    option to join is available\n\n  // 3. request to join is sent\n  //    response is either unable or simply success\n\n  // 4. upon joining, player information is sent and options locked\n  //\n\n\n  //    popup handling place?\n\n\n});\n\n\n\n\n\n\n\n// handles lobby code about ui\nclass LobbyUI {\n\n  constructor() {}\n\n  get_name() {\n\n    const\n      regex = /^(\\w|\\s)+$/,\n      validation = name => {\n        // only alphanumeric and whitespace characters\n        if(!(/^(\\w|\\s)+$/.test(name))) return false;\n\n        // no profanity\n        if(swearjar.profane(name)) return false;\n\n        return true;\n      };\n\n    let name = ENV.user.name;\n    while(!name || (name.trim()===\"\") || !validation(name)) {\n      name = window.prompt('please enter a display name');\n    }\n\n    this.name = name.trim();\n    resolve(name);\n\n\n\n  }\n\n  getTeam(max_team_count = ENV.lobby.info.game_settings.noneditableSettings.maxTeams, solo_option = true) {\n    let result = window.prompt(`Type your team # between 1 and ${max_team_count} (blank for none)` );\n    if(result === '') result = 0; // shortcut for solo\n\n    const userCanceledDialog = result === null;\n    const isNotANumber = isNaN(new Number(result));\n    const isUnderBounds = result < 0;\n    const isOverBounds = result > max_team_count;\n\n    if(userCanceledDialog || isNotANumber || isUnderBounds || isOverBounds) return null;\n    return result;\n  }\n\n  getPassword() {\n\n    const password = window.prompt('Enter a 4 digit password', '0000');\n\n    if(/^\\d{4}$/.test(password)) {\n\n      // success\n      return password\n\n    } else if(password === null) {\n\n      // cancel\n      return\n\n    } else {\n\n      // failure\n      window.alert('Not 4 numbers, please try again...');\n      return\n\n    }\n\n    \n\n  }\n\n\n  render() {\n    ReactDOM.render(\n      <DSGameLobby lobbySummary={ENV.lobby.info} joined={ENV.lobby.user.isJoined} ready={ENV.lobby.user.isReady} />,\n      document.getElementById('container')\n    );\n  }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n\n\n\n\n\n// NETWORK INTERACTION\n\n// CONNECT TO server\nlet socket = io.connect();\n\nsocket.on('onconnected', function(obj) {\n  if(ENV.user.id === undefined) ENV.user.id = obj.id;\n  socket.emit('userid', ENV.user.id);\n  ENV[\"id\"] = ENV.user.id;\n\n  // REQUEST JOIN lobby\n  let lobbyID = window.location.pathname.slice(1);\n  socket.emit('join lobby', lobbyID);\n\n  // send stored info\n  let name = ENV.storage.user_name || \"\";\n  socket.emit('set name', name);\n\n  let type = ENV.storage.type || \"standard\"; // TODO: double hard-coded see view.js:36\n  if(type) socket.emit('set type', type);\n\n  // if(sessionStorage.ready = !!(sessionStorage.nickname && sessionStorage.type)) socket.emit('ready');\n\n  LOBBY.setupLink();\n  LOBBY.focusOnInput();\n});\n\nsocket.on('lobby joined', lobby_type => {\n  if(lobby_type == 'private') {\n    let team = ENV.storage.team || -1; // TODO: double hard-coded see view.js:36\n    if(team) socket.emit('set team', team);\n  }\n})\n\n// handle errors\nsocket.on('error', msg => log(msg));\nsocket.on('game error', msg => LOBBY.disconnect(msg));\n\n// on join lobby\nlet editing;\nsocket.on('lobby state', lobby => {\n  // log(`lobby state`);\n  // log(lobby.players);\n  ENV[\"lobby\"] = lobby;\n  let me = lobby.players[ENV.storage.id];\n  if(me) ENV.user.name = me.name;\n  if(!editing) refreshLobbyView();\n});\n\nsocket.on('spectate', function() {\n  if(confirm(\"This lobby is closed. Join as a spectator?\")) {\n    ENV[\"spectate\"] = true;\n  } else {\n    window.location.reset()\n  }\n});\n\nsocket.on('ready', () => {\n  // LOBBY.disableInput();\n});\n\n// socket.on('disconnect', () => LOBBY.disconnect(`you are no longer connected`));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// NEEDS WORK\nlet CODE = {};\n\n// START game\n\nCODE.start_game = function(data) {\n\n  if(!ENV.lobby) { setTimeout(()=>{CODE.start_game(data)}, 100); return; }\n\n  recordHistory(data);\n\n  data.spectate = !!ENV[\"spectate\"];\n  ENV.sound.stop('chill');\n  if(ENV.lobby.type == 'public' && !ENV.spectate) ENV.storage.ongoing = 'true';\n  if(!ENV.storage.first_game  && !ENV.spectate) { ENV.help.drawer.expand(); ENV.help.carousel.start(); ENV.storage.first_game = true; }\n  g = ENV.game = DeepSpaceGame.create(data);\n  LOBBY.startCountdown(()=>{\n    PARTICLES.stop();\n    LOBBY.showHelpButton();\n  \tENV.game.start();\n  \tLOBBY.refreshClock();\n  })\n};\n\nsocket.on('start', CODE.start_game);\n\n// during game\n\n// socket.on('input stack', (data) => NetworkHelper.in_input_stack(data));\nsocket.on('ship update', (data) => NetworkHelper.in_ship_update(data));\nsocket.on('ship override', (data) => NetworkHelper.in_ship_override(data));\nsocket.on('bullet create', (data) => NetworkHelper.in_bullet_create(data));\nsocket.on('bullet destroy', (data) => NetworkHelper.in_bullet_destroy(data));\nsocket.on('ship damage', (data) => NetworkHelper.in_ship_damage(data));\nsocket.on('block create', (data) => NetworkHelper.in_block_create(data));\nsocket.on('block destroy', (data) => NetworkHelper.in_block_destroy(data));\nsocket.on('block damage', (data) => NetworkHelper.in_block_damage(data));\nsocket.on('block change', (data) => NetworkHelper.in_block_change(data));\n\nsocket.on('sub create', (data) => NetworkHelper.in_sub_create(data));\nsocket.on('sub destroy', (data) => NetworkHelper.in_sub_destroy(data));\n\nsocket.on('flag pickup', (data) => NetworkHelper.in_flag_pickup(data));\nsocket.on('flag drop', (data) => NetworkHelper.in_flag_drop(data));\n\nsocket.on('msg ship kill', (data) => NetworkHelper.in_msg_ship_kill(data));\n\nsocket.on('stop', () => delete DeepSpaceGame.runningInstance);\n\nsocket.on('game over', (data) => NetworkHelper.end_game());\nsocket.on('request progress', (data) => NetworkHelper.request_local_progress());\nsocket.on('overtime', () => NetworkHelper.go_overtime());\n\nsocket.on('disconnect player', (userid) => NetworkHelper.in_disconnect_player(userid));\n\nfunction recordHistory(data) {\n  let pp = ENV.storage.getItem(\"previous_players\");\n\n  if(pp) { pp = JSON.parse(pp).toSet() } else { pp = new Set() }\n  for(let player of data.players) if(player.id !== ENV[\"id\"]) {pp.delete(player.id); pp.add(player.id);}//pp.add(`${player.id}::${player.name}`);\n\n  ENV.storage.setItem(\"previous_players\", JSON.stringify(pp.toArray()));\n}\n*/"]}