{"version":3,"sources":["../js/input.js"],"names":["EventProtocol","listeners","Map","on","addListener","key","handler","listenerList","get","push","set","info","listener","indexOf","splice","Button","id","state","trueHandlers","Set","falseHandlers","ontrue","_ontrue","bind","onfalse","_onfalse","bool","handlerGroup","add","delete","clear","size","Axis","morethanhandlers","lessthanhandlers","onlessthan","_onlessthan","onmorethan","_onmorethan","value","limit","active","Input","_buttons","_axes","button","axis","KeyboardInput","boundHandle","event","handle","startListening","document","addEventListener","keyCode","setState","type","removeEventListener","GamepadInput","refreshing","refreshRate","lookForGamepad","window","setGamepad","e","gamepad","unsetGamepad","navigator","getGamepads","gamepads","startRefreshing","refresh","axes","buttons","refreshAxes","refreshButtons","setTimeout","i","length","axisValue","buttonValue","pressed","abortRefresh","MobileInput","InputStack","items","reference","addHandlers","removeHandlers","item","changeOccurring","callAddItemHandlers","execListeners","callRemoveItemHandlers","handlersForItem","expectingHandler","valueInterpreter","a","setItem","clearItem","itemValue","toString","keyboard","stack","addItemWhen","removeItemWhen","onadd","console","log","onremove"],"mappings":"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AMC,QAAQC,GAAR,CAAY,YAAZ,CAAN;AAAA,CAApB;AACAL,MAAMM,QAAN,CAAe,MAAf,EAAuB;AAAA,SAAMF,QAAQC,GAAR,CAAY,cAAZ,CAAN;AAAA,CAAvB;;AAEAL,MAAMG,KAAN,CAAY,OAAZ,EAAqB;AAAA,SAAMC,QAAQC,GAAR,CAAY,aAAZ,CAAN;AAAA,CAArB;AACAL,MAAMM,QAAN,CAAe,OAAf,EAAwB;AAAA,SAAMF,QAAQC,GAAR,CAAY,eAAZ,CAAN;AAAA,CAAxB;;AAGA,CAAC,YAAM;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOD,CApHD","file":"input.js","sourcesContent":["\nclass EventProtocol {\n\n  constructor() {\n    this.listeners = new Map();\n\n    // aliases\n    this.on = this.addListener;\n  }\n\n  addListener(key, handler) {\n\n    if(typeof handler !== 'function')\n      return false;\n\n    const listenerList = this.listeners.get(key) || [];\n    listenerList.push(handler);\n    this.listeners.set(key, listenerList);\n\n    return true; // success\n\n  }\n\n  execListeners(key, info) {\n    const listenerList = this.listeners.get(key) || [];\n    for(let listener of listenerList)\n      listener(info);\n  }\n\n  removeListener(key, handler) {\n    const listenerList = this.listeners.get(key) || [];\n    const indexOf = listenerList.indexOf(handler);\n    if(indexOf === -1) return false; // failure\n    listenerList.splice(indexOf, 1);\n    return true; // success\n  }\n\n}\n\nclass Button {\n\n  constructor(id) {\n\n    this.id = id;\n    this.state = false;\n    this.trueHandlers = new Set();\n    this.falseHandlers = new Set();\n\n    this.ontrue = this._ontrue.bind(this);\n    this.onfalse = this._onfalse.bind(this);\n\n  }\n\n  setState(bool) {\n    if(this.state === bool) return;\n\n    this.state = bool;\n    this.handlerGroup = bool ? this.trueHandlers : this.falseHandlers;\n    for(let handler of this.handlerGroup)\n      handler();\n\n  }\n\n  get hasHandlers() {\n    return (\n      !!this.trueHandlers.size ||\n      !!this.falseHandlers.size\n    );\n  }\n\n  _ontrue(handler) {\n    this.trueHandlers.add(handler);\n  }\n\n  _onfalse(handler) {\n    this.falseHandlers.add(handler);\n  }\n\n  remove(handler) {\n    return (\n      this.trueHandlers.delete(handler) ||\n      this.falseHandlers.delete(handler)\n    );\n  }\n\n  clear() {\n    this.trueHandlers.clear();\n    this.falseHandlers.clear();\n  }\n  reset() {\n    this.clear();\n  }\n\n}\n\nclass Axis {\n\n  constructor(id) {\n\n    this.id = id;\n    this.state = 0;\n    this.morethanhandlers = new Map();\n    this.lessthanhandlers = new Map();\n\n    this.onlessthan = this._onlessthan.bind(this);\n    this.onmorethan = this._onmorethan.bind(this);\n\n  }\n\n  setState(value) {\n    if(this.state === value) return;\n\n    this.state = value;\n    for(let [handler, [limit, active]] of this.morethanhandlers) {\n      if(value > limit) handler(this.state);\n    }\n    for(let [handler, [limit, active]] of this.lessthanhandlers) {\n      if(value < limit) handler(this.state);\n    }\n\n  }\n\n  get hasHandlers() {\n    return (\n      !!this.morethanhandlers.size ||\n      !!this.lessthanhandlers.size\n    );\n  }\n\n  _onmorethan(limit) {\n    return (handler => {\n      this.morethanhandlers.set(handler, [limit, false]);\n    });\n  }\n\n  _onlessthan(limit) {\n    return (handler => {\n      this.lessthanhandlers.set(handler, [limit, false]);\n    });\n  }\n\n  remove(handler) {\n    return (\n      this.morethanhandlers.delete(handler) ||\n      this.lessthanhandlers.delete(handler)\n    );\n  }\n\n  clear() {\n    this.morethanhandlers.clear();\n    this.lessthanhandlers.clear();\n  }\n  reset() {\n    this.clear();\n  }\n\n\n}\n\nclass Input extends EventProtocol {\n\n  constructor() {\n    super();\n\n    this._buttons = new Map();\n    this._axes = new Map();\n\n  }\n\n  button(id) {\n\n    let button = this._buttons.get(id);\n    if(!button) button = new Button(id);\n    this._buttons.set(id, button);\n\n    return button;\n\n  }\n\n  axis(id) {\n\n    let axis = this._axes.get(id);\n    if(!axis) axis = new Axis(id);\n    this._axes.set(id, axis);\n\n    return axis;\n\n  }\n\n}\n\nclass KeyboardInput extends Input {\n\n  constructor() {\n    super();\n\n    this.boundHandle = (event) => this.handle(event);\n    this.startListening();\n  }\n\n\n  // being a keyboard input made up of only keys or _buttons\n  // the keyboard is listening for only keydown and keyup events\n  // to alert the corresponding handlers\n  startListening() {\n\n    document.addEventListener('keydown', this.boundHandle);\n    document.addEventListener('keyup', this.boundHandle);\n\n  }\n\n  handle(event) {\n\n    for(let [id, button] of this._buttons) {\n      if(id != event.keyCode) continue;\n      button.setState(event.type === 'keydown');\n    }\n\n  }\n\n  stopListening() {\n\n    document.removeEventListener('keydown', this.boundHandle);\n    document.removeEventListener('keyup', this.boundHandle);\n\n  }\n\n}\n\nclass GamepadInput extends Input {\n\n  // SETUP AND REFRESH LOOP\n\n  constructor() {\n    super();\n\n    this.refreshing = false;\n    this.refreshRate = 16;\n\n    this.lookForGamepad();\n    window.addEventListener(\"gamepadconnected\", e => this.setGamepad(e.gamepad));\n    window.addEventListener(\"gamepaddisconnected\", e => { this.unsetGamepad(); this.lookForGamepad() });\n\n  }\n\n  lookForGamepad() {\n\n    if(navigator.getGamepads) {\n\n      let gamepads = navigator.getGamepads();\n      for(let gamepad of gamepads) {\n        if(gamepad) {\n          this.setGamepad(gamepad);\n          break;\n        }\n      }\n\n    }\n\n  }\n\n  setGamepad(gamepad) {\n    this.gamepad = gamepad;\n    this.startRefreshing();\n  }\n\n  startRefreshing() {\n    this.refreshing = true;\n    this.refresh();\n  }\n\n  refresh() {\n    if(!this.gamepad || !this.gamepad.axes || !this.gamepad.buttons) this.unsetGamepad();\n    if(!this.refreshing) return;\n\n    this.refreshAxes();\n    this.refreshButtons();\n\n    setTimeout(()=>this.refresh(), this.refreshRate)\n  }\n\n  refreshAxes() {\n\n    for(let i = 0; i < this.gamepad.axes.length; i++) {\n      const axisValue = this.gamepad.axes[i];\n      this.axis(i).setState(axisValue);\n    }\n\n  }\n\n  refreshButtons() {\n\n    for(let i = 0; i < this.gamepad.buttons.length; i++) {\n      const buttonValue = this.gamepad.buttons[i].pressed;\n      this.button(i).setState(buttonValue);\n    }\n\n  }\n\n  abortRefresh() {\n    this.refreshing = false;\n  }\n\n  unsetGamepad() {\n    this.gamepad = null;\n    this.abortRefresh()\n  }\n\n\n\n\n\n}\n\nclass MobileInput extends Input {\n\n  // initial support is only for accelerometer data\n\n\n\n\n}\n\nclass InputStack extends EventProtocol {\n\n  constructor() {\n\n    super();\n\n    this.items = new Map();\n    this.reference = new Map();\n    this.addHandlers = new Map();\n    this.removeHandlers = new Map();\n\n  }\n\n  setItem(item, value) {\n\n    const changeOccurring = typeof this.items.get(item) === 'undefined'; // if item not already present\n    this.items.set(item, value);\n\n    if(changeOccurring) {\n      this.callAddItemHandlers(item);\n      this.execListeners('change');\n    }\n\n  }\n\n  clearItem(item) {\n\n    const changeOccurring = typeof this.items.get(item) !== 'undefined'; // if item not already removed\n    this.items.delete(item);\n\n    if(changeOccurring) {\n      this.callRemoveItemHandlers(item);\n      this.execListeners('change');\n    }\n\n  }\n\n  onadd(item, handler) {\n\n    let handlersForItem = this.addHandlers.get(item);\n    if(!handlersForItem) handlersForItem = new Set();\n    handlersForItem.add(handler);\n    this.addHandlers.set(item, handlersForItem);\n\n  }\n\n  onremove(item, handler) {\n\n    let handlersForItem = this.removeHandlers.get(item);\n    if(!handlersForItem) handlersForItem = new Set();\n    handlersForItem.add(handler);\n    this.removeHandlers.set(item, handlersForItem);\n\n  }\n\n  addItemWhen(item, expectingHandler, valueInterpreter = a => a) {\n\n    expectingHandler((value = 1) => {\n\n      this.setItem(item, valueInterpreter(value));\n\n    })\n\n  }\n\n  removeItemWhen(item, expectingHandler) {\n\n    expectingHandler(() => {\n\n      this.clearItem(item);\n\n    })\n\n  }\n\n  callAddItemHandlers(item) {\n\n    let handlersForItem = this.addHandlers.get(item);\n    if(!handlersForItem) return;\n    const itemValue = this.items.get(item);\n    for(let handler of handlersForItem)\n      handler(itemValue);\n\n  }\n\n  callRemoveItemHandlers(item) {\n\n    let handlersForItem = this.removeHandlers.get(item);\n    if(!handlersForItem) return;\n    for(let handler of handlersForItem)\n      handler();\n\n  }\n\n  removeItemHandler(item, handler) {\n    const addHandlers = this.addHandlers(item);\n    if(addHandlers) addHandlers.delete(handler);\n    const removeHandlers = this.removeHandlers(item);\n    if(removeHandlers) removeHandlers.delete(handler);\n  }\n\n  clearItemHandlers(item) {\n\n    this.addHandlers.delete(item);\n    this.removeHandlers.delete(item);\n\n  }\n\n  // this.execListeners('serverUpdate', {rank, money, simple_rank, simple_money});\n\n  toString() {\n    return this.items.toString();\n  }\n\n}\n\n\n\nvar keyboard = new KeyboardInput();\nvar gamepad = new GamepadInput();\n\nvar stack = new InputStack();\n\nstack.addItemWhen('shoot', keyboard.button(32).ontrue);\nstack.removeItemWhen('shoot', keyboard.button(32).onfalse);\n\nstack.addItemWhen('left', gamepad.axis(0).onlessthan(-0.2));\nstack.removeItemWhen('left', gamepad.axis(0).onmorethan(-0.2));\nstack.addItemWhen('right', gamepad.axis(0).onmorethan(0.2));\nstack.removeItemWhen('right', gamepad.axis(0).onlessthan(0.2));\n\nstack.onadd('shoot', () => console.log('shoot added'));\nstack.onremove('shoot', () => console.log('shoot removed'));\n\nstack.onadd('left', () => console.log('left added'));\nstack.onremove('left', () => console.log('left removed'));\n\nstack.onadd('right', () => console.log('right added'));\nstack.onremove('right', () => console.log('right removed'));\n\n\n(() => {\n  //\n  // const handler = () => {};\n  // const interpreter = ()=>{};\n  //\n  //\n  // Keyboard.button(17).ontrue(handler);\n  // Gamepad.axis(2).onmorethan(0.2, handler);\n  // Gamepad.axis(0).onlessthan(0.2, handler);\n  //\n  // InputM.listAction(Gamepad.axis(2).onmorethan(-0.7), 'shoot');\n  // InputM.listAction(Gamepad.axis(1).onmorethan(0.2), 'x+', interpreter)\n  //\n  //\n  // Stack.enlist('shoot', Keyboard.button(3))\n\n\n\n\n  //\n  //\n  // let raw_acc_data = [0, 0], applied_acc_data = [0, 0]; // [x, y]\n  // let threshold = 1, bias = [0, 0]; // deadzone\n  // const minThreshhold = 1;\n  // const maxThreshhold = 4;\n  // const thresholdSpan = maxThreshhold - minThreshhold;\n  // bias = ENV.storage.calibration = (ENV.storage.calibration) ? ENV.storage.calibration.split(\",\").map(Number) : [0, 0];\n  // // let origin = [0, bias];\n  // if (ENV.mobile && window.DeviceMotionEvent != undefined) {\n  //   window.ondevicemotion = function (e) {\n  //     raw_acc_data = [e.accelerationIncludingGravity.x, e.accelerationIncludingGravity.y];\n  //     // if ( e.rotationRate )  {\n  //     //   document.getElementById(\"rotationAlpha\").innerHTML = e.rotationRate.alpha;\n  //     //   document.getElementById(\"rotationBeta\").innerHTML = e.rotationRate.beta;\n  //     //   document.getElementById(\"rotationGamma\").innerHTML = e.rotationRate.gamma;\n  //     // }\n  //   }\n  //\n  //   inputs.updateMotion = function () {\n  //\n  //     // generate the data\n  //\n  //     let orientation = window.orientation,\n  //       [raw_x, raw_y] = raw_acc_data, [x, y] = [raw_x, raw_y];\n  //\n  //     if (orientation === 90) {\n  //       x = -raw_y, y = raw_x\n  //     }\n  //     else if (orientation === -90) {\n  //       x = raw_y, y = -raw_x\n  //     }\n  //     else if (orientation === 180 || orientation === -180) {\n  //       x = -x, y = -y\n  //     }\n  //\n  //     applied_acc_data = [x, y];\n  //     x -= bias[0]; // bias towards player;\n  //     y -= bias[1];\n  //\n  //     if(ENV.options.input.invertControls) { x = -x; y = -y }\n  //\n  //     // apply the data\n  //\n  //\n  //     if(x > minThreshhold) { // more\n  //       if(x < maxThreshhold) inputs.angularAcceleration = (maxThreshhold - x) / thresholdSpan;\n  //       else inputs.angularAcceleration = 1;\n  //     } else if(x < -minThreshhold) { // less\n  //       if(x > -maxThreshhold) inputs.angularAcceleration = (-maxThreshhold - x) / thresholdSpan;\n  //       else inputs.angularAcceleration = -1;\n  //     } else { // neither\n  //       inputs.angularAcceleration = 0;\n  //     }\n  //\n  //     if(y > minThreshhold) { // more\n  //       if(y < maxThreshhold) inputs.acceleration = (maxThreshhold - y) / thresholdSpan;\n  //       else inputs.acceleration = 1;\n  //     } else if(y < -minThreshhold) { // less\n  //       if(y > -maxThreshhold) inputs.acceleration = (-maxThreshhold - y) / thresholdSpan;\n  //       else inputs.acceleration = -1;\n  //     } else { // neither\n  //       inputs.acceleration = 0;\n  //     }\n  //\n  //     // if (x > threshold) {\n  //     //   inputStack.add('rt')\n  //     // } else {\n  //     //   inputStack.delete('rt')\n  //     // }\n  //     // if (x < -threshold) {\n  //     //   inputStack.add('lt')\n  //     // } else {\n  //     //   inputStack.delete('lt')\n  //     // }\n  //     // if (y > threshold) {\n  //     //   inputStack.add('up')\n  //     // } else {\n  //     //   inputStack.delete('up')\n  //     // }\n  //     // if (y < -threshold) {\n  //     //   inputStack.add('dn')\n  //     // } else {\n  //     //   inputStack.delete('dn')\n  //     // }\n  //\n  //     $('#clock').text(`x: ${x.round(0)}, y: ${y.round(0)}`);\n  //\n  //   };\n  // }\n  //\n\n\n\n\n\n\n})();"]}