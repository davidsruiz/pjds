{"version":3,"sources":["../js/index.js"],"names":["LobbyManager","require","LM","clients","Map","TEA","RANK","MIN","MAX","win","current_rank","new_rank","f1","validate","lose","f2","f3","x","Math","round","pow","rank","gameport","process","env","PORT","io","express","UUID","verbose","http","app","server","createServer","colors","bodyParser","use","json","path","static","resolve","listen","console","log","get","req","res","sendfile","post","lobbyID","type","params","next","new_private","new_practice","redirect","list","body","history","online","c","id","client","lobby","existsInPrivate","entry","name","push","encoded_rank","simple_rank","status","send","encrypt","simple","encoded","parseInt","decrypt","isNaN","won","exists","sio","configure","set","handshakeData","callback","sockets","on","data","id_","locked","emit","connect","map","testPassword","warn","players","has","join","disconnect","broadcast","state","flagHolder","playerID","leadTeam","getTeam","userid","score","scores","team","t","s","undefined","game_lead_team","winningTeam","setWinForPlayers","endCurrentGame","simplify"],"mappings":";;AACA;AACA;AACA;AACA;;AAEA,IAAMA,eAAeC,QAAQ,oBAAR,CAArB;AACA,IAAMC,KAAK,IAAIF,YAAJ,EAAX;AACA,IAAIG,UAAU,IAAIC,GAAJ,EAAd;;AAEA,IAAMC,MAAMJ,QAAQ,UAAR,CAAZ;AACA,IAAMK,OAAO;AACXC,OAAK,CADM,EACHC,KAAK,GADF;AAEXC,KAFW,eAEPC,YAFO,EAEO;AAChB,QAAIC,WAAWD,eAAe,KAAKE,EAAL,CAAQF,YAAR,CAA9B;AACA,WAAO,KAAKG,QAAL,CAAcF,QAAd,CAAP;AACD,GALU;AAMXG,MANW,gBAMNJ,YANM,EAMQ;AACjB,QAAIC,iBAAJ;AACA,QAAGD,eAAe,GAAlB,EAAuB;AAAEC,iBAAWD,eAAe,KAAKK,EAAL,CAAQL,YAAR,CAA1B;AAAkD,KAA3E,MACK,IAAGA,eAAe,GAAlB,EAAuB;AAAEC,iBAAWD,eAAe,KAAKE,EAAL,CAAQF,YAAR,CAA1B;AAAkD,KAA3E,MACA;AAAEC,iBAAWD,eAAe,KAAKM,EAAL,CAAQN,YAAR,CAA1B;AAAkD;AACzD,WAAO,KAAKG,QAAL,CAAcF,QAAd,CAAP;AACD,GAZU;AAaXC,IAbW,cAaRK,CAbQ,EAaL;AAAC,WAAOC,KAAKC,KAAL,CAAW,QAAMF,IAAE,GAAR,CAAX,CAAP;AAAgC,GAb5B;AAa8B;AACzCF,IAdW,cAcRE,CAdQ,EAcL;AAAC,WAAOC,KAAKC,KAAL,CAAY,OAAKF,IAAE,GAAP,CAAD,GAAiB,KAAG,CAA/B,CAAP;AAA0C,GAdtC;AAcwC;AACnDD,IAfW,cAeRC,CAfQ,EAeL;AAAC,WAAOC,KAAKC,KAAL,CAAWD,KAAKE,GAAL,CAAU,CAAC,KAAD,IAAQH,IAAE,GAAV,CAAV,EAA2B,CAA3B,IAAgC,CAA3C,CAAP;AAAqD,GAfjD;AAemD;AAC9DJ,UAhBW,oBAgBFQ,IAhBE,EAgBI;AACb,QAAGA,OAAO,KAAKd,GAAf,EAAoB;AAAEc,aAAO,KAAKd,GAAZ;AAAiB,KAAvC,MACK,IAAGc,OAAO,KAAKb,GAAf,EAAoB;AAAEa,aAAO,KAAKb,GAAZ;AAAiB;AAC5C,WAAOa,IAAP;AACD;AApBU,CAAb;;AAyBA,IACIC,WAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAD1C;AAAA,IAGIC,KAAkBzB,QAAQ,WAAR,CAHtB;AAAA,IAII0B,UAAkB1B,QAAQ,SAAR,CAJtB;AAAA,IAKI2B,OAAkB3B,QAAQ,WAAR,CALtB;AAAA,IAOI4B,UAAkB,KAPtB;AAAA,IAQIC,OAAkB7B,QAAQ,MAAR,CARtB;AAAA,IASI8B,MAAkBJ,SATtB;AAAA,IAUIK,SAAkBF,KAAKG,YAAL,CAAkBF,GAAlB,CAVtB;;AAYA;AACA;AACA,IAAMG,SAASjC,QAAQ,QAAR,CAAf;AACA,IAAMkC,aAAalC,QAAQ,aAAR,CAAnB;AACA8B,IAAIK,GAAJ,CAAQD,WAAWE,IAAX,EAAR;AACA,IAAMC,OAAOrC,QAAQ,MAAR,CAAb;;AAEA8B,IAAIK,GAAJ,CAAQT,QAAQY,MAAR,CAAeD,KAAKE,OAAL,CAAa,QAAb,CAAf,CAAR;;AAEI;AACAR,OAAOS,MAAP,CAAc,EAAd;AACJT,OAAOS,MAAP,CAAcnB,QAAd;AACI;AACJoB,QAAQC,GAAR,CAAY,wCAAwCrB,QAApD;;AAGAS,IAAIa,GAAJ,CAAS,GAAT,EAAc,UAAUC,GAAV,EAAeC,GAAf,EAAqB;;AAEjCA,MAAIC,QAAJ,CAAaT,KAAKE,OAAL,CAAa,sBAAb,CAAb;AAED,CAJD;;AAMA;;AAEAT,IAAIiB,IAAJ,CAAU,QAAV,EAAoB,UAAUH,GAAV,EAAeC,GAAf,EAAoB;;AAEtC,MAAIG,gBAAJ;AAAA,MACIC,OAAOL,IAAIM,MAAJ,CAAWD,IADtB;;AAGA,UAAOA,IAAP;AACE,SAAK,MAAL;AACA,SAAK,QAAL;AACA,SAAK,UAAL;AACE,UAAGA,QAAQ,MAAX,EAAmBD,UAAU/C,GAAGkD,IAAH,EAAV;AACnB,UAAGF,QAAQ,QAAX,EAAqBD,UAAU/C,GAAGmD,WAAH,EAAV;AACrB,UAAGH,QAAQ,UAAX,EAAuBD,UAAU/C,GAAGoD,YAAH,EAAV;AACvBR,UAAIS,QAAJ,OAAiBN,OAAjB;AACF;;AAEA,SAAK,eAAL;AACE,UAAIO,OAAOX,IAAIY,IAAJ,CAASC,OAApB;AACA,UAAIC,SAAS,EAAb,CAAiB,IAAIC,IAAI,CAAR;AAFnB;AAAA;AAAA;;AAAA;AAGE,6BAAcJ,IAAd,8HAAoB;AAAA,cAAZK,GAAY;;AAClB,cAAIC,UAAS3D,QAAQyC,GAAR,CAAYiB,GAAZ,CAAb;AACA,cAAGC,WAAUA,QAAOC,KAAjB,IAA0B7D,GAAG8D,eAAH,CAAmBF,QAAOC,KAAP,CAAaF,EAAhC,CAA7B,EAAkE;AAChE,gBAAII,QAAQ,CAACH,QAAOI,IAAR,EAAcJ,QAAOC,KAAP,CAAaF,EAA3B,CAAZ;AACAF,mBAAOQ,IAAP,CAAYF,KAAZ;AACD;AACF;AATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUEnB,UAAIT,IAAJ,CAASsB,MAAT;AACF;AACA,SAAK,MAAL;AACE,UAAIE,KAAKhB,IAAIY,IAAJ,CAASI,EAAlB;AAAA,UACIO,YADJ;AAAA,UAEIC,cAAc,CAFlB;;AAIA,UAAG,CAACR,EAAJ,EAAQ;AACNf,YAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,aAArB;AACD,OAFD,MAEO;AACLH,uBAAe/D,IAAImE,OAAJ,CAAYH,WAAZ,EAAyBR,EAAzB,CAAf;AACAf,YAAIT,IAAJ,CAAS,EAACoC,QAAQJ,WAAT,EAAsBK,SAASN,YAA/B,EAAT;AACD;AACH;AACA,SAAK,aAAL;AACE,UAAIP,KAAKhB,IAAIY,IAAJ,CAASI,EAAT,IAAejC,MAAxB;AAAA,UACIwC,eAAevB,IAAIY,IAAJ,CAASpC,IAAT,IAAiB,EADpC;AAAA,UAEIgD,cAAcM,SAAStE,IAAIuE,OAAJ,CAAYR,YAAZ,EAA0BP,EAA1B,CAAT,CAFlB;;AAIA,UAAGgB,MAAMR,WAAN,CAAH,EAAuBA,cAAc,CAAd;;AAEvB,UAAIP,SAAS3D,QAAQyC,GAAR,CAAYiB,EAAZ,CAAb;AACA,UAAGC,UAAUA,OAAOgB,GAApB,EAAyB;AAAE;AACzBT,sBAAc/D,KAAKG,GAAL,CAAS4D,WAAT,CAAd;AACAP,eAAOgB,GAAP,GAAa,KAAb;AACD,OAHD,MAGO;AACLT,sBAAc/D,KAAKQ,IAAL,CAAUuD,WAAV,CAAd;AACD;;AAEDD,qBAAe/D,IAAImE,OAAJ,CAAYH,WAAZ,EAAyBR,EAAzB,CAAf;AACAf,UAAIT,IAAJ,CAAS,EAACoC,QAAQJ,WAAT,EAAsBK,SAASN,YAA/B,EAAT;AACF,SAAK,IAAL;AACEtB,UAAIT,IAAJ,CAAST,MAAT;AACF;AArDF;;AAwDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,CA/ED;;AAkFAG,IAAIa,GAAJ,CAAS,UAAT,EAAsB,UAAUC,GAAV,EAAeC,GAAf,EAAoBM,IAApB,EAA2B;;AAE/CN,MAAIC,QAAJ,CAAaT,KAAKE,OAAL,CAAa,qBAAb,CAAb;AAED,CAJD,E,CAII;;AAEJ;AACAT,IAAIa,GAAJ,CAAS,IAAT,EAAgB,UAAUC,GAAV,EAAeC,GAAf,EAAoBM,IAApB,EAA2B;;AAEvC,MAAIH,UAAUJ,IAAIM,MAAJ,CAAW,CAAX,CAAd;AACA,MAAGjD,GAAG6E,MAAH,CAAU9B,OAAV,CAAH,EAAuB;AACrBH,QAAIC,QAAJ,CAAaT,KAAKE,OAAL,CAAa,kBAAb,CAAb;AACD,GAFD,MAEO;AACLM,QAAIS,QAAJ;AACD;AAEJ,CATD,E,CASI;;AAEA;AACJ,IAAIyB,MAAMtD,GAAGe,MAAH,CAAUT,MAAV,CAAV;;AAGI;AACA;AACJgD,IAAIC,SAAJ,CAAc,YAAW;AACrBD,MAAIE,GAAJ,CAAQ,WAAR,EAAqB,CAArB;AACAF,MAAIE,GAAJ,CAAQ,eAAR,EAAyB,UAAUC,aAAV,EAAyBC,QAAzB,EAAmC;AAC1DA,aAAS,IAAT,EAAe,IAAf,EAD0D,CACpC;AACvB,GAFD;AAGH,CALD;;AAOI;AACA;AACA;AACJ;AACA;AACA;;AAEI;AACA;AACA;AACA;;;AAMJJ,IAAIK,OAAJ,CAAYC,EAAZ,CAAe,YAAf,EAA6B,UAAUxB,MAAV,EAAkB;;AAE7CA,SAAOwB,EAAP,CAAU,SAAV,EAAqB,gBAAQ;AAC3B;AACA;;AAEA;AACA,QAAMvB,QAAQ7D,GAAG6D,KAAH,CAASwB,KAAK,CAAL,CAAT,CAAd;AACA,QAAGxB,KAAH,EAAU;;AAER;AACAD,aAAO0B,GAAP,GAAaD,KAAK,CAAL,KAAW3D,MAAxB;AACAkC,aAAOI,IAAP,GAAcqB,KAAK,CAAL,CAAd;;AAEA;AACA,UAAGxB,MAAM0B,MAAT,EAAiB;AACf3B,eAAO4B,IAAP,CAAY,MAAZ;AACD,OAFD,MAEO;AACL;AACA3B,cAAM4B,OAAN,CAAc7B,MAAd;AACA;AACAA,eAAO4B,IAAP,CAAY,WAAZ,EAAyB,CAAC5B,OAAO0B,GAAR,EAAazB,MAAM6B,GAAN,EAAb,CAAzB;AACD;AACF,KAfD,MAeO;AAAE9B,aAAO4B,IAAP,CAAY,OAAZ,aAA8BH,KAAK,CAAL,CAA9B;AAAqD;;AAE9D;AACD,GAxBD;;AA0BAzB,SAAOwB,EAAP,CAAU,MAAV,EAAkB,gBAAQ;AACxB;AACA;;AAEA;AACA,QAAMvB,QAAQ7D,GAAG6D,KAAH,CAASwB,KAAK,CAAL,CAAT,CAAd;AACA,QAAGxB,KAAH,EAAU;;AAER;AACA,UAAGA,MAAM0B,MAAT,EAAiB;;AAEf;AACA,YAAG1B,MAAM8B,YAAN,CAAmBN,KAAK,CAAL,CAAnB,CAAH,EAAgC;AAC9BxB,gBAAM4B,OAAN,CAAc7B,MAAd;AACAA,iBAAO4B,IAAP,CAAY,WAAZ,EAAyB,CAAC5B,OAAOD,EAAR,EAAYE,MAAM6B,GAAN,EAAZ,CAAzB;AACD,SAHD,MAGO;AACL9B,iBAAO4B,IAAP,CAAY,MAAZ;AACD;AACF,OATD,MASO;AACLhD,gBAAQoD,IAAR,gCAA0CP,KAAK,CAAL,CAA1C;AACAzB,eAAO4B,IAAP,CAAY,WAAZ,EAAyB,CAAC5B,OAAOD,EAAR,EAAYE,MAAM6B,GAAN,EAAZ,CAAzB;AACD;AACF,KAhBD,MAgBO;AAAE9B,aAAO4B,IAAP,CAAY,OAAZ,aAA8BH,KAAK,CAAL,CAA9B;AAAqD;AAE/D,GAxBD;;AA0BAzB,SAAOwB,EAAP,CAAU,MAAV,EAAkB,gBAAQ;;AAExB;AACA,QAAMvB,QAAQD,OAAOC,KAArB;AACA,QAAGA,KAAH,EAAU;;AAER;AACA,UAAGA,MAAMgC,OAAN,CAAcC,GAAd,CAAkBlC,MAAlB,CAAH,EAA8B;;AAE9B;AACAC,YAAMkC,IAAN,CAAWnC,MAAX,EAAmByB,IAAnB;AAED;AAEF,GAdD;;AAgBAzB,SAAOwB,EAAP,CAAU,SAAV,EAAqB,gBAAQ;;AAE3B;AACA,QAAMvB,QAAQD,OAAOC,KAArB;AACA,QAAGA,KAAH,EAAU;;AAER;AACA,UAAGA,MAAMgC,OAAN,CAAcC,GAAd,CAAkBlC,MAAlB,CAAH,EAA8B;;AAE9B;AACAC,YAAMkC,IAAN,CAAWnC,MAAX,EAAmByB,IAAnB;AAED;AAEF,GAdD;;AAyBAzB,SAAOwB,EAAP,CAAU,YAAV,EAAwB,gBAAQ;;AAE9B;AACA,QAAMvB,QAAQD,OAAOC,KAArB;AACA,QAAGA,KAAH,EAAU;;AAERA,YAAMmC,UAAN,CAAiBpC,MAAjB;AAED,KAJD,MAIO,CAAI;AAEZ,GAVD;;AAowB,EAAP,CAAU,aAAV,EAAyB;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,aAAvB,EAAsCZ,IAAtC,EAA4CzB,MAA5C,CAAf,GAAqEA,OAAO4B,IAAP,CAAY,MAAZ,CAA7E;AAAA,GAAzB;AACA5B,SAAOwB,EAAP,CAAU,eAAV,EAA2B;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,eAAvB,EAAwCZ,IAAxC,EAA8CzB,MAA9C,CAAf,GAAuEA,OAAO4B,IAAP,CAAY,MAAZ,CAA/E;AAAA,GAA3B;AACA5B,SAAOwB,EAAP,CAAU,eAAV,EAA2B;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,eAAvB,EAAwCZ,IAAxC,EAA8CzB,MAA9C,CAAf,GAAuEA,OAAO4B,IAAP,CAAY,MAAZ,CAA/E;AAAA,GAA3B;AACA5B,SAAOwB,EAAP,CAAU,gBAAV,EAA4B;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,gBAAvB,EAAyCZ,IAAzC,EAA+CzB,MAA/C,CAAf,GAAwEA,OAAO4B,IAAP,CAAY,MAAZ,CAAhF;AAAA,GAA5B;;AAEA5B,SAAOwB,EAAP,CAAU,aAAV,EAAyB;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAa2B,IAAb,CAAkB,aAAlB,EAAiCH,IAAjC,CAAf,GAAwDzB,OAAO4B,IAAP,CAAY,MAAZ,CAAhE;AAAA,GAAzB;;AAEA5B,SAAOwB,EAAP,CAAU,cAAV,EAA0B;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,cAAvB,EAAuCZ,IAAvC,EAA6CzB,MAA7C,CAAf,GAAsEA,OAAO4B,IAAP,CAAY,MAAZ,CAA9E;AAAA,GAA1B;AACA5B,SAAOwB,EAAP,CAAU,eAAV,EAA2B;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,eAAvB,EAAwCZ,IAAxC,EAA8CzB,MAA9C,CAAf,GAAuEA,OAAO4B,IAAP,CAAY,MAAZ,CAA/E;AAAA,GAA3B;AACA5B,SAAOwB,EAAP,CAAU,cAAV,EAA0B;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,cAAvB,EAAuCZ,IAAvC,EAA6CzB,MAA7C,CAAf,GAAsEA,OAAO4B,IAAP,CAAY,MAAZ,CAA9E;AAAA,GAA1B;AACA5B,SAAOwB,EAAP,CAAU,cAAV,EAA0B;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,cAAvB,EAAuCZ,IAAvC,EAA6CzB,MAA7C,CAAf,GAAsEA,OAAO4B,IAAP,CAAY,MAAZ,CAA9E;AAAA,GAA1B;;AAEA5B,SAAOwB,EAAP,CAAU,YAAV,EAAwB;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,YAAvB,EAAqCZ,IAArC,EAA2CzB,MAA3C,CAAf,GAAoEA,OAAO4B,IAAP,CAAY,MAAZ,CAA5E;AAAA,GAAxB;AACA5B,SAAOwB,EAAP,CAAU,aAAV,EAAyB;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAaoC,SAAb,CAAuB,aAAvB,EAAsCZ,IAAtC,EAA4CzB,MAA5C,CAAf,GAAqEA,OAAO4B,IAAP,CAAY,MAAZ,CAA7E;AAAA,GAAzB;;AAED;;;;;;;;;;;;AAcC;AACA5B,SAAOwB,EAAP,CAAU,aAAV,EAAyB,gBAAQ;AAC/B,QAAGxB,OAAOC,KAAV,EAAiB;AACf,UAAG,CAACD,OAAOC,KAAP,CAAaqC,KAAb,CAAmBC,UAAvB,EAAmC;AACjCvC,eAAOC,KAAP,CAAa2B,IAAb,CAAkB,aAAlB,EAAiCH,IAAjC;AACA;AACAzB,eAAOC,KAAP,CAAaqC,KAAb,CAAmBC,UAAnB,GAAgCd,KAAKe,QAArC;AACA,YAAG,OAAOxC,OAAOC,KAAP,CAAaqC,KAAb,CAAmBG,QAA1B,IAAsC,WAAzC,EACEzC,OAAOC,KAAP,CAAaqC,KAAb,CAAmBG,QAAnB,GAA8BzC,OAAOC,KAAP,CAAayC,OAAb,CAAqB1C,OAAO2C,MAA5B,CAA9B;AACH,OAND,MAMO;AACL3C,eAAOC,KAAP,CAAa2B,IAAb,CAAkB,WAAlB,EAA+BH,IAA/B;AACD;AACF,KAVD,MAUO;AACLzB,aAAO4B,IAAP,CAAY,MAAZ;AACD;AACF,GAdD;AAeA5B,SAAOwB,EAAP,CAAU,WAAV,EAAuB,gBAAQ;AAC7B,QAAGxB,OAAOC,KAAV,EAAiB;AACfD,aAAOC,KAAP,CAAa2B,IAAb,CAAkB,WAAlB,EAA+BH,IAA/B;AACA;AACD,KAHD,MAGO;AACLzB,aAAO4B,IAAP,CAAY,MAAZ;AACD;AACF,GAPD;AAQA5B,SAAOwB,EAAP,CAAU,uBAAV,EAAmC,gBAAQ;AACzC,QAAGxB,OAAOC,KAAV,EAAiB;AACfrB,cAAQC,GAAR,aAAsBmB,OAAOI,IAA7B,cAA0CqB,KAAKmB,KAA/C;AACA,UAAG5C,OAAO2C,MAAP,IAAiB3C,OAAOC,KAAP,CAAaqC,KAAb,CAAmBC,UAAvC,EAAmD;AACjDvC,eAAOC,KAAP,CAAaqC,KAAb,CAAmBO,MAAnB,CAA0BpB,KAAKqB,IAA/B,IAAuC,EAACC,GAAGtB,KAAKqB,IAAT,EAAeE,GAAGvB,KAAKmB,KAAvB,EAAvC;AACA5C,eAAOC,KAAP,CAAaqC,KAAb,CAAmBC,UAAnB,GAAgCU,SAAhC;AACAjD,eAAOC,KAAP,CAAaqC,KAAb,CAAmBG,QAAnB,GAA8BzC,OAAOC,KAAP,CAAaiD,cAA3C;AACAtE,gBAAQC,GAAR,gEAAuEmB,OAAOC,KAAP,CAAaiD,cAApF;;AAEA;AACA;AACD;AACF,KAXD,MAWO;AACLlD,aAAO4B,IAAP,CAAY,MAAZ;AACD;AACF,GAfD;;AAkBF5B,SAAOwB,EAAP,CAAU,eAAV,EAA2B,gBAAQ;AACjC,QAAGxB,OAAOC,KAAV,EAAiB;AACfrB,cAAQC,GAAR,aAAsBmB,OAAOI,IAA7B,cAA0CqB,KAAKmB,KAA/C;AACA,UAAGnB,KAAKmB,KAAL,IAAc,CAAd,IAAmBnB,KAAKmB,KAAL,IAAc,GAApC,EAAyC;AACvC5C,eAAOC,KAAP,CAAaqC,KAAb,CAAmBO,MAAnB,CAA0BpB,KAAKqB,IAA/B,IAAuC,EAACC,GAAGtB,KAAKqB,IAAT,EAAeE,GAAGvB,KAAKmB,KAAvB,EAAvC;AACA5C,eAAOC,KAAP,CAAaqC,KAAb,CAAmBG,QAAnB,GAA8BzC,OAAOC,KAAP,CAAaiD,cAA3C;AACAtE,gBAAQC,GAAR,wDAA+DmB,OAAOC,KAAP,CAAaiD,cAA5E;AACD;AACF,KAPD,MAOO;AACLlD,aAAO4B,IAAP,CAAY,MAAZ;AACD;AACF,GAXD;;AAaE5B,SAAOwB,EAAP,CAAU,eAAV,EAA2B;AAAA,WAAQxB,OAAOC,KAAP,GAAeD,OAAOC,KAAP,CAAa2B,IAAb,CAAkB,eAAlB,EAAmCH,IAAnC,CAAf,GAA0DzB,OAAO4B,IAAP,CAAY,MAAZ,CAAlE;AAAA,GAA3B;;AAEA5B,SAAOwB,EAAP,CAAU,WAAV,EAAuB,UAACC,IAAD,EAAU;AAC/B,QAAIxB,cAAJ;AACA,QAAG,CAACA,QAAQD,OAAOC,KAAhB,KAA0BA,MAAMqC,KAAN,CAAYC,UAAZ,IAA0BvC,OAAO2C,MAA9D,EAAsE;AACpE/D,cAAQC,GAAR,uCAA8C4C,KAAK0B,WAAnD;AACA,UAAGlD,MAAMb,IAAN,IAAc,QAAjB,EAA2Ba,MAAMmD,gBAAN,CAAuB3B,KAAK0B,WAA5B;;AAE3BlD,YAAM2B,IAAN,CAAW,WAAX;AACA;AACA3B,YAAMoD,cAAN;AACApD,YAAM2B,IAAN,CAAW,aAAX,EAA0B3B,MAAMqD,QAAN,EAA1B;AACD;AACF,GAXD;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkBH,CA/WD,E,CA+WI","file":"index.js","sourcesContent":["\n// EXTENTION //\n// Array.new = function(length, filler){let a = []; for(let i = 0; i < length; i++) a.push(filler); return a;};\n// let TIME = {sec: function(mil) {return mil * 1000}, min: function(mil) {return this.sec(mil) * 60}};\n///////////////\n\nconst LobbyManager = require('./lobby_manager.js');\nconst LM = new LobbyManager();\nlet clients = new Map();\n\nconst TEA = require('./TEA.js');\nconst RANK = {\n  MIN: 0, MAX: 599,\n  win(current_rank) {\n    let new_rank = current_rank + this.f1(current_rank);\n    return this.validate(new_rank);\n  },\n  lose(current_rank) {\n    let new_rank;\n    if(current_rank < 300) { new_rank = current_rank - this.f2(current_rank); }\n    else if(current_rank < 500) { new_rank = current_rank - this.f1(current_rank); }\n    else { new_rank = current_rank - this.f3(current_rank); }\n    return this.validate(new_rank);\n  },\n  f1(x) {return Math.round(2000/(x+100))}, // rank win (0 - 599), rank lose (300 - 499)\n  f2(x) {return Math.round((600/(x+100)) + (21/6))}, // rank lose (0 - 299)\n  f3(x) {return Math.round(Math.pow((-0.006*(x-400)), 2) + 3)}, // rank lose (500 - 599)\n  validate(rank) {\n    if(rank < this.MIN) { rank = this.MIN }\n    else if(rank > this.MAX) { rank = this.MAX }\n    return rank;\n  }\n};\n\n\n\nlet\n    gameport        = process.env.PORT || 4004,\n\n    io              = require('socket.io'),\n    express         = require('express'),\n    UUID            = require('node-uuid'),\n\n    verbose         = false,\n    http            = require('http'),\n    app             = express(),\n    server          = http.createServer(app);\n\n// let shortid = require('shortid');\n// shortid.characters(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\nconst colors = require('colors');\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\nconst path = require('path');\n\napp.use(express.static(path.resolve('public')));\n\n    //Tell the server to listen for incoming connections\n    server.listen(80);\nserver.listen(gameport);\n    //Log something so we know that it succeeded.\nconsole.log('\\t :: Express :: Listening on port ' + gameport );\n\n\napp.get( '/', function( req, res ) {\n\n  res.sendfile(path.resolve('public/server_m.html'));\n\n});\n\n// app.get( '/play', function( req, res ){ res.sendfile(\"play.html\")\n\napp.post( '/:type', function( req, res ){\n\n  let lobbyID,\n      type = req.params.type;\n\n  switch(type) {\n    case \"pool\":\n    case \"create\":\n    case \"practice\":\n      if(type == \"pool\") lobbyID = LM.next();\n      if(type == \"create\") lobbyID = LM.new_private();\n      if(type == \"practice\") lobbyID = LM.new_practice();\n      res.redirect(`/${lobbyID}`);\n    break;\n\n    case \"online_status\":\n      let list = req.body.history;\n      let online = []; let c = 0;\n      for(let id of list) {\n        let client = clients.get(id);\n        if(client && client.lobby && LM.existsInPrivate(client.lobby.id)) {\n          let entry = [client.name, client.lobby.id];\n          online.push(entry);\n        }\n      }\n      res.json(online);\n    break;\n    case \"rank\":\n      var id = req.body.id,\n          encoded_rank,\n          simple_rank = 0;\n\n      if(!id) {\n        res.status(400).send('Bad Request');\n      } else {\n        encoded_rank = TEA.encrypt(simple_rank, id);\n        res.json({simple: simple_rank, encoded: encoded_rank});\n      }\n    break;\n    case \"update_rank\":\n      var id = req.body.id || UUID(),\n          encoded_rank = req.body.rank || '',\n          simple_rank = parseInt(TEA.decrypt(encoded_rank, id));\n\n      if(isNaN(simple_rank)) simple_rank = 0;\n\n      let client = clients.get(id);\n      if(client && client.won) { // if connected and needs winning\n        simple_rank = RANK.win(simple_rank);\n        client.won = false;\n      } else {\n        simple_rank = RANK.lose(simple_rank);\n      }\n\n      encoded_rank = TEA.encrypt(simple_rank, id);\n      res.json({simple: simple_rank, encoded: encoded_rank});\n    case \"id\":\n      res.json(UUID());\n    break;\n  }\n\n  // if(req.params.type == \"pool\") {\n  //   lobbyID = LM.next();\n  // } else\n  // if(req.params.type == \"create\") {\n  //   lobbyID = LM.new_private();\n  // } else\n  // if(req.params.type == \"history\") {\n  //   lobbyID = LM.new_private();\n  // }\n  //\n  // if(req.params.type == \"practice\") {\n  //   lobbyID = LM.new_private({players: 1});\n  // }\n  //\n  // // if(req.params.type == \"private\") private[lobbyID] = lobbies[lobbyID] = new Lobby(lobbyID);\n  // // console.log(`new lobby: ${lobbyID}`);\n  // res.redirect(`/${lobbyID}`);\n\n});\n\n\napp.get( '/friends' , function( req, res, next ) {\n\n  res.sendfile(path.resolve('public/friends.html'));\n\n}); //app.get /friends\n\n// routing to lobby\napp.get( '/*' , function( req, res, next ) {\n\n    let lobbyID = req.params[0];\n    if(LM.exists(lobbyID)) {\n      res.sendfile(path.resolve('public/game.html'));\n    } else {\n      res.redirect(`/`);\n    }\n\n}); //app.get *\n\n    //Create a socket.io instance using our express server\nlet sio = io.listen(server);\n\n\n    //Configure the socket.io connection settings.\n    //See http://socket.io/\nsio.configure(function (){\n    sio.set('log level', 0);\n    sio.set('authorization', function (handshakeData, callback) {\n      callback(null, true); // error first callback style\n    });\n});\n\n    //Enter the game server code. The game server handles\n    //client connections looking for a game, creating games,\n    //leaving games, joining games and ending games when they leave.\n// game_server = require('./game.server.js');\n// Lobby = require('./old_lobby.js');\n// LobbyManager.\n\n    //Socket.io will call this function when a client connects,\n    //So we can send that client looking for a game to play,\n    //as well as give that client a unique ID to use so we can\n    //maintain the list if players.\n\n\n\n\n\nsio.sockets.on('connection', function (client) {\n\n  client.on('connect', data => {\n    // data [lobby_id, user_id, user_name]\n    // reply with either auth or connected\n\n    // identify lobby\n    const lobby = LM.lobby(data[0]);\n    if(lobby) {\n\n      // assign values to client\n      client.id_ = data[1] || UUID();\n      client.name = data[2];\n\n      // require authentication (or not)\n      if(lobby.locked) {\n        client.emit('auth');\n      } else {\n        // connect to lobby\n        lobby.connect(client);\n        // send client it's ID copy of lobby as now stands\n        client.emit('connected', [client.id_, lobby.map()])\n      }\n    } else { client.emit('error', `lobby ${data[0]} not found`); }\n\n    // client.emit('connected');\n  });\n\n  client.on('auth', data => {\n    // data [lobby_id, password]\n    // reply with either auth or connected\n\n    // identify lobby\n    const lobby = LM.lobby(data[0]);\n    if(lobby) {\n\n      // check if password is needed\n      if(lobby.locked) {\n\n        // test against password\n        if(lobby.testPassword(data[1])) {\n          lobby.connect(client);\n          client.emit('connected', [client.id, lobby.map()]);\n        } else {\n          client.emit('auth');\n        }\n      } else {\n        console.warn(`no auth needed! for lobby ${data[0]}`);\n        client.emit('connected', [client.id, lobby.map()]);\n      }\n    } else { client.emit('error', `lobby ${data[0]} not found`); }\n\n  });\n\n  client.on('join', data => {\n\n    // verify participant to lobby\n    const lobby = client.lobby;\n    if(lobby) {\n\n      // return if client has already joined\n      if(lobby.players.has(client)) return;\n\n      // actual joining\n      lobby.join(client, data);\n\n    }\n\n  });\n\n  client.on('connect', data => {\n\n    // verify participant to lobby\n    const lobby = client.lobby;\n    if(lobby) {\n\n      // return if client has already joined\n      if(lobby.players.has(client)) return;\n\n      // actual joining\n      lobby.join(client, data);\n\n    }\n\n  });\n\n\n\n\n\n\n\n\n\n\n  client.on('disconnect', data => {\n\n    // remove connection to lobby\n    const lobby = client.lobby;\n    if(lobby) {\n\n      lobby.disconnect(client);\n\n    } else {  }\n\n  });\n\n\n\n\n\n\n\n\n\n  //\n  //     //tell the player they connected, giving them their id\n  //   client.emit('onconnected', { id: UUID() } );\n  // client.on('userid', (id) => {\n  //     client.userid = id;\n  //     console.log(`client ${client.userid} +`.green);\n  //   });\n  //\n  //   client.on('join lobby', lobbyID => {\n  //     let lobby = LM.lobby(lobbyID);\n  //     if(lobby) {\n  //       // check if there is room in lobby\n  //       lobby.emit('lobby state', lobby.simplify());\n  //       if(!lobby.join(client)) {\n  //         client.emit('spectate');\n  //         if(lobby.ongoing) {\n  //           client.emit('start', lobby.start());\n  //         }\n  //       } else { client.emit('lobby joined', lobby.type) }\n  //       clients.set(client.userid, client);\n  //       if(lobby.type == 'public') LM.updateLobbyPlacement(lobby); // TODO\n  //     } else {\n  //       client.emit('error', `lobby ${lobbyID} not found`);\n  //     }\n  //   });\n  //\n  //   client.on('set name', name => {\n  //     let lobby\n  //     if(lobby = client.lobby) {\n  //       if(client.active) lobby.players.get(client.userid).name = name;\n  //\n  //       lobby.emit('lobby state', lobby.simplify());\n  //\n  //       // if(lobby.full && lobby.ready) lobby.emit('start', lobby.game());\n  //     } else {\n  //       client.emit('error', 'set name request ignored');\n  //     }\n  //   });\n  //\n  //   client.on('set type', type => {\n  //     let lobby\n  //     if(lobby = client.lobby) {\n  //       if(client.active) lobby.players.get(client.userid).type = type;\n  //       client.emit('lobby state', lobby.simplify());\n  //       // if(lobby.full && lobby.ready) lobby.emit('start', lobby.game());\n  //     } else {\n  //       client.emit('error', 'set type request ignored');\n  //     }\n  //   });\n  //\n  //\n  //   client.on('set team', team => {\n  //     let lobby;\n  //     if((lobby = client.lobby) && lobby.type == 'private') {\n  //       if(team < lobby.max_teams && team >= -1) { // validations\n  //         if(client.active) lobby.players.get(client.userid).team = team;\n  //         // client.emit('lobby state', lobby.simplify());\n  //       } else { client.emit('error', 'invalid team'); }\n  //     } else {\n  //       client.emit('error', 'set team request ignored');\n  //     }\n  //   });\n  //\n  //\n  //   client.on('ready', () => {\n  //     let lobby;\n  //     if(lobby = client.lobby) {\n  //       if(lobby.playerCleared(client)) client.ready = true;\n  //       lobby.emit('lobby state', lobby.simplify());\n  //       console.log('ready');\n  //       if(lobby.sustainable && lobby.ready)\n  //         {\n  //           lobby.emit('start', lobby.start(()=>{\n  //             // on finish.. TODO: fix this.. also encapsulate all of these anonymous functions into a controller class\n  //             if(lobby.type == 'public') LM.updateLobbyPlacement(lobby);\n  //           }));\n  //         }\n  //     } else {\n  //       client.emit('error', 'ready request ignored');\n  //     }\n  //\n  //   });\n  //\n  //\n  //\n  //   client.on('disconnect', function () {\n  //\n  //           //Useful to know when someone disconnects\n  //       console.log(`client ${client.userid} -`.red);\n  //\n  //       clients.delete(client.userid);\n  //\n  //       let lobby = client.lobby;\n  //       if(lobby) {\n  //         let was_active = client.active;\n  //         lobby.remove(client);\n  //         if(lobby.ongoing && was_active) {\n  //           if(lobby.state.flagHolder == client.userid) lobby.emit('flag drop');\n  //           lobby.emit('disconnect player', client.userid);\n  //           if(lobby.unsustainable) {\n  //             lobby.emit('game error', 'a communications error occured');\n  //             lobby.endCurrentGame();\n  //           }\n  //         }\n  //         lobby.emit('lobby state', lobby.simplify());\n  //         if(lobby.type == 'public') LM.updateLobbyPlacement(lobby);\n  //\n  //         // once a lobby has been vacated by all players it is safe for that lobby to cease existence\n  //         // a single player joining an empty lobby will not happen often except with private practice lobbies\n  //         // otherwise keep it in the realm\n  //         setTimeout(()=>{ let del = false;\n  //           if(lobby.connected.size == 0) { LM.delete(lobby.id); del = true }\n  //           console.log(`lobby ${lobby.id} ${del ? `deleted` : `preserved`}`);\n  //         }, 5000);\n  //\n  //       }\n  //\n  //   }); //client.on disconnect\n\n\n\n\n\n    // during game\n    // client.on('input stack', data => client.lobby ? client.lobby.broadcast('input stack', data, client) : client.emit('stop'));\n\n    client.on('ship update', data => client.lobby ? client.lobby.broadcast('ship update', data, client) : client.emit('stop'));\n    client.on('ship override', data => client.lobby ? client.lobby.broadcast('ship override', data, client) : client.emit('stop'));\n    client.on('bullet create', data => client.lobby ? client.lobby.broadcast('bullet create', data, client) : client.emit('stop'));\n    client.on('bullet destroy', data => client.lobby ? client.lobby.broadcast('bullet destroy', data, client) : client.emit('stop'));\n\n    client.on('ship damage', data => client.lobby ? client.lobby.emit('ship damage', data) : client.emit('stop'));\n\n    client.on('block create', data => client.lobby ? client.lobby.broadcast('block create', data, client) : client.emit('stop'));\n    client.on('block destroy', data => client.lobby ? client.lobby.broadcast('block destroy', data, client) : client.emit('stop'));\n    client.on('block damage', data => client.lobby ? client.lobby.broadcast('block damage', data, client) : client.emit('stop'));\n    client.on('block change', data => client.lobby ? client.lobby.broadcast('block change', data, client) : client.emit('stop'));\n\n    client.on('sub create', data => client.lobby ? client.lobby.broadcast('sub create', data, client) : client.emit('stop'));\n    client.on('sub destroy', data => client.lobby ? client.lobby.broadcast('sub destroy', data, client) : client.emit('stop'));\n\n   /*client.on('combined', messages => {\n      if(!client.lobby) { client.emit('stop'); return; }\n\n      for(var [key, data] of messages) {\n        switch(key) {\n          case 'ship update':\n            client.lobby.broadcast('ship update', data, client); break;\n          case 'ship override':\n            client.lobby.broadcast('ship override', data, client); break;\n        }\n      }\n    });*/\n\n\n    // TODO: figure out what happens when a flag holder disconnects..\n    client.on('flag pickup', data => {\n      if(client.lobby) {\n        if(!client.lobby.state.flagHolder) {\n          client.lobby.emit('flag pickup', data);\n          // client.lobby.first.emit('begin create asteroids')\n          client.lobby.state.flagHolder = data.playerID;\n          if(typeof client.lobby.state.leadTeam == 'undefined')\n            client.lobby.state.leadTeam = client.lobby.getTeam(client.userid);\n        } else {\n          client.lobby.emit('flag drop', data);\n        }\n      } else {\n        client.emit('stop')\n      }\n    });\n    client.on('flag drop', data => {\n      if(client.lobby) {\n        client.lobby.emit('flag drop', data);\n        // client.lobby.emit('stop create asteroids')\n      } else {\n        client.emit('stop')\n      }\n    });\n    client.on('flag progress confirm', data => {\n      if(client.lobby) {\n        console.log(`client ${client.name} sent ${data.score}`);\n        if(client.userid == client.lobby.state.flagHolder) {\n          client.lobby.state.scores[data.team] = {t: data.team, s: data.score};\n          client.lobby.state.flagHolder = undefined;\n          client.lobby.state.leadTeam = client.lobby.game_lead_team;\n          console.log(`client.on('flag progress confirm' >> current team lead: ${client.lobby.game_lead_team}`);\n\n          // if(client.lobby.ongoing) this.finish();\n          // console.log(`data.team ${data.team}, data.score: ${data.score}`);\n        }\n      } else {\n        client.emit('stop')\n      }\n    });\n\n\n  client.on('flag progress', data => {\n    if(client.lobby) {\n      console.log(`client ${client.name} sent ${data.score}`);\n      if(data.score >= 0 && data.score <= 100) {\n        client.lobby.state.scores[data.team] = {t: data.team, s: data.score};\n        client.lobby.state.leadTeam = client.lobby.game_lead_team;\n        console.log(`client.on('flag progress' >> current team lead: ${client.lobby.game_lead_team}`);\n      }\n    } else {\n      client.emit('stop')\n    }\n  });\n\n    client.on('msg ship kill', data => client.lobby ? client.lobby.emit('msg ship kill', data) : client.emit('stop'));\n\n    client.on('game over', (data) => {\n      let lobby;\n      if((lobby = client.lobby) && lobby.state.flagHolder == client.userid) {\n        console.log(`from 'game over'. winningTeam: ${data.winningTeam}`);\n        if(lobby.type == 'public') lobby.setWinForPlayers(data.winningTeam);\n\n        lobby.emit('game over');\n        // lobby.emit('end with winner', {winner: data.winningTeam});\n        lobby.endCurrentGame();\n        lobby.emit('lobby state', lobby.simplify());\n      }\n    });\n\n    // let client_game_over = (data) => {\n    //   let lobby;\n    //   if((lobby = client.lobby) && lobby.state.flagHolder == client.userid) {\n    //     console.log(`from 'game over'. winningTeam: ${data.winningTeam}`);\n    //     if(lobby.type == 'public') lobby.setWinForPlayers(data.winningTeam);\n    //     lobby.emit('game over', data);\n    //     lobby.endCurrentGame();\n    //     lobby.emit('lobby state', lobby.simplify());\n    //   }\n    // };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}); //sio.sockets.on connection\n"]}