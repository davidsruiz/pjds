{"version":3,"sources":["../js/index.js"],"names":["LobbyManager","require","LM","clients","Map","TEA","RANK","MIN","MAX","win","current_rank","new_rank","f1","validate","lose","f2","f3","x","Math","round","pow","rank","gameport","process","env","PORT","io","express","verbose","http","app","server","createServer","shortid","UUID","generate","colors","bodyParser","use","json","path","static","resolve","listen","console","log","get","req","res","sendfile","post","lobbyID","type","params","next","new_private","new_practice","redirect","IDs","body","list","lobbiesMap","unavailable","id","client","lobby","existsInPrivate","push","set","lobbies","Array","from","map","pair","names","name","encoded_rank","simple_rank","status","send","encrypt","simple","encoded","parseInt","decrypt","isNaN","won","money","simple_money","onlineClient","lastGameResults","has","hits","delete","exists","sio","configure","handshakeData","callback","sockets","on","data","id_","locked","emit","connect","broadcast","mapUsers","testPassword","warn","playersMap","join","then","catch","reason","message","yellow","startFrom","everyoneIsReady","mapPlayers","startGame","getSetupData","updateOptions","setPasswordFrom","clearPasswordFrom","disconnect","setTimeout","empty","addListenerList","msg","addListener","a","exec","incomingMessages","onFinish"],"mappings":"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","file":"index.js","sourcesContent":["\n// EXTENTION //\n// Array.new = function(length, filler){let a = []; for(let i = 0; i < length; i++) a.push(filler); return a;};\n// let TIME = {sec: function(mil) {return mil * 1000}, min: function(mil) {return this.sec(mil) * 60}};\n///////////////\n\nconst LobbyManager = require('./lobby_manager.js');\nconst LM = new LobbyManager();\nlet clients = new Map();\n\nconst TEA = require('./TEA.js');\nconst RANK = {\n  MIN: 0, MAX: 599,\n  win(current_rank) {\n    let new_rank = current_rank + this.f1(current_rank);\n    return this.validate(new_rank);\n  },\n  lose(current_rank) {\n    let new_rank;\n    if(current_rank < 300) { new_rank = current_rank - this.f2(current_rank); }\n    else if(current_rank < 500) { new_rank = current_rank - this.f1(current_rank); }\n    else { new_rank = current_rank - this.f3(current_rank); }\n    return this.validate(new_rank);\n  },\n  f1(x) {return Math.round(2000/(x+100))}, // rank win (0 - 599), rank lose (300 - 499)\n  f2(x) {return Math.round((600/(x+100)) + (21/6))}, // rank lose (0 - 299)\n  f3(x) {return Math.round(Math.pow((-0.006*(x-400)), 2) + 3)}, // rank lose (500 - 599)\n  validate(rank) {\n    if(rank < this.MIN) { rank = this.MIN }\n    else if(rank > this.MAX) { rank = this.MAX }\n    return rank;\n  }\n};\n\n// Math.flipCoin = (p = 0.5) => Math.random() < p;\n// Array.prototype.shuffle = function() { return this.sort(() => Math.flipCoin() )};\n// const UUID = () => (Date.now().toString(36)).split('').shuffle().join();\n\n\n\nlet\n  gameport        = process.env.PORT || 4004,\n\n  io              = require('socket.io'),\n  express         = require('express'),\n  // UUID            = require('node-uuid'),\n\n  verbose         = false,\n  http            = require('http'),\n  app             = express(),\n  server          = http.createServer(app);\n\nlet shortid = require('shortid');\n// shortid.characters(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\");\nconst UUID = () => shortid.generate();\n\nconst colors = require('colors');\nconst bodyParser = require('body-parser');\napp.use(bodyParser.json());\nconst path = require('path');\n\napp.use(express.static(path.resolve('public')));\n\n//Tell the server to listen for incoming connections\nserver.listen(80);\nserver.listen(gameport);\n//Log something so we know that it succeeded.\nconsole.log('\\t :: Express :: Listening on port ' + gameport );\n\n\napp.get( '/', function( req, res ) {\n\n  res.sendfile(path.resolve('public/home.html'));\n\n});\n\n// app.get( '/play', function( req, res ){ res.sendfile(\"play.html\")\n\napp.post( '/:type', function( req, res ){\n\n  let lobbyID,\n    type = req.params.type;\n\n  switch(type) {\n    case \"pool\":\n    case \"create\":\n    case \"practice\":\n      if(type == \"pool\") lobbyID = LM.next();\n      if(type == \"create\") lobbyID = LM.new_private();\n      if(type == \"practice\") lobbyID = LM.new_practice();\n      res.redirect(`/${lobbyID}`);\n      break;\n\n    case \"online_status\":\n      const IDs = req.body.list;\n\n      // lobbies/unavailable\n      const lobbiesMap = new Map();\n      const unavailable = [];\n      for(let id of IDs) {\n        const client = clients.get(id);\n        if(client && client.lobby && LM.existsInPrivate(client.lobby.id)) {\n          // lobbies\n          const lobby = lobbiesMap.get(client.lobby.id) || [];\n          lobby.push(id);\n          lobbiesMap.set(client.lobby.id, lobby);\n        } else {\n          // unavailable\n          unavailable.push(id);\n        }\n      }\n      const lobbies = Array.from(lobbiesMap).map(pair => [pair[0], ...pair[1]]); // transform lobbies map\n\n      // names\n      const names = [];\n      for(let id of IDs) {\n        const client = clients.get(id);\n        if(client) names.push([id, client.name])\n      }\n\n      // response\n      res.json({lobbies, unavailable, names});\n\n      break;\n    case \"rank\":\n      var id = req.body.id,\n        encoded_rank,\n        simple_rank = 0;\n\n      if(!id) {\n        res.status(400).send('No ID');\n      } else {\n        encoded_rank = TEA.encrypt(simple_rank, id);\n        res.json({simple: simple_rank, encoded: encoded_rank});\n      }\n      break;\n    case \"update_rank\":\n      var id = req.body.id || UUID(),\n        encoded_rank = req.body.rank || '',\n        simple_rank = parseInt(TEA.decrypt(encoded_rank, id));\n\n      if(isNaN(simple_rank)) simple_rank = 0;\n\n      let client = clients.get(id);\n      if(client && client.won) { // if connected and needs winning\n      // if(client && client.lobby && client.lobby.removeWinner(id)) { // if connected and needs winning\n        client.won = false;\n        simple_rank = RANK.win(simple_rank);\n      } else {\n        simple_rank = RANK.lose(simple_rank);\n      }\n\n      encoded_rank = TEA.encrypt(simple_rank, id);\n      res.json({simple: simple_rank, encoded: encoded_rank});\n      break;\n    case 'update_stats':\n\n      let id = req.body[0] || UUID();\n      let rank = req.body[1] || '';\n      let money = req.body[2] || '';\n      let simple_rank = parseInt(TEA.decrypt(rank, id));\n      let simple_money = parseInt(TEA.decrypt(money, id));\n\n      // if either is invalid, reset.\n      if(isNaN(simple_rank) || isNaN(simple_money)) {\n        simple_rank = 0;\n        simple_money = 0;\n      }\n\n      const onlineClient = clients.get(id);\n      if((onlineClient && onlineClient.lobby) && onlineClient.lobby.lastGameResults.has(id)) {\n\n        const [won, hits] = onlineClient.lobby.lastGameResults.get(id);\n        onlineClient.lobby.lastGameResults.delete(id);\n\n        // rank\n        if(won) {\n          simple_rank = RANK.win(simple_rank);\n        } else {\n          simple_rank = RANK.lose(simple_rank);\n        }\n\n        // money\n        simple_money += hits;\n\n      } else { simple_rank = RANK.lose(simple_rank); }\n\n      rank = TEA.encrypt(simple_rank, id);\n      money = TEA.encrypt(simple_money, id);\n      res.json([rank, money, simple_rank, simple_money]);\n\n\n      break;\n    case \"id\":\n      res.json(UUID());\n      break;\n  }\n\n  // if(req.params.type == \"pool\") {\n  //   lobbyID = LM.next();\n  // } else\n  // if(req.params.type == \"create\") {\n  //   lobbyID = LM.new_private();\n  // } else\n  // if(req.params.type == \"history\") {\n  //   lobbyID = LM.new_private();\n  // }\n  //\n  // if(req.params.type == \"practice\") {\n  // if(req.params.type == \"practice\") {\n  //   lobbyID = LM.new_private({players: 1});\n  // }\n  //\n  // // if(req.params.type == \"private\") private[lobbyID] = lobbies[lobbyID] = new Lobby(lobbyID);\n  // // console.log(`new lobby: ${lobbyID}`);\n  // res.redirect(`/${lobbyID}`);\n\n});\n\n\napp.get( '/friends' , function( req, res, next ) {\n\n  res.sendfile(path.resolve('public/friends.html'));\n\n}); //app.get /friends\n\n// routing to lobby\napp.get( '/*' , function( req, res, next ) {\n\n  let lobbyID = req.params[0];\n  if(LM.exists(lobbyID)) {\n    res.sendfile(path.resolve('public/game.html'));\n  } else {\n    res.redirect(`/`);\n  }\n\n}); //app.get *\n\n//Create a socket.io instance using our express server\nlet sio = io.listen(server);\n\n\n//Configure the socket.io connection settings.\n//See http://socket.io/\nsio.configure(function (){\n  sio.set('log level', 0);\n  sio.set('authorization', function (handshakeData, callback) {\n    callback(null, true); // error first callback style\n  });\n});\n\n//Enter the game server code. The game server handles\n//client connections looking for a game, creating games,\n//leaving games, joining games and ending games when they leave.\n// game_server = require('./game.server.js');\n// Lobby = require('./old_lobby.js');\n// LobbyManager.\n\n//Socket.io will call this function when a client connects,\n//So we can send that client looking for a game to play,\n//as well as give that client a unique ID to use so we can\n//maintain the list if players.\n\n\n\n\n\nsio.sockets.on('connection', function (client) {\n\n  client.on('connect', data => {\n    // data [lobby_id, user_id, user_name]\n    // reply with either auth or connected\n\n    // identify lobby\n    const lobby = LM.lobby(data[0]);\n    if(lobby) {\n\n      // assign values to client\n      client.id_ = data[1] || UUID();\n      client.name = data[2];\n\n      // require authentication (or not)\n      if(lobby.locked) {\n        client.emit('auth');\n      } else {\n        // connect to lobby\n        lobby.connect(client);\n        // send client it's ID copy of lobby as now stands\n        client.emit('connected', [client.id_, lobby.map()]);\n        lobby.broadcast('usersUpdate', lobby.mapUsers(), client);\n      }\n    } else { client.emit('error', `lobby ${data[0]} not found`); }\n\n    // client.emit('connected');\n  });\n\n  client.on('auth', data => {\n    // data [lobby_id, password]\n    // reply with either auth or connected\n\n    // identify lobby\n    const lobby = LM.lobby(data[0]);\n    if(lobby) {\n\n      // check if password is needed\n      if(lobby.locked) {\n\n        // test against password\n        if(lobby.testPassword(data[1])) {\n          lobby.connect(client);\n          client.emit('connected', [client.id_, lobby.map()]);\n          lobby.broadcast('usersUpdate', lobby.mapUsers(), client);\n        } else {\n          client.emit('auth');\n        }\n      } else {\n        console.warn(`no auth needed! for lobby ${data[0]}`);\n        client.emit('connected', [client.id_, lobby.map()]);\n        lobby.broadcast('usersUpdate', lobby.mapUsers(), client);\n      }\n    } else { client.emit('error', `lobby ${data[0]} not found`); }\n\n  });\n\n  client.on('join', data => {\n\n    // verify participant to lobby\n    const lobby = client.lobby;\n    if(lobby) {\n\n      // return if client has already joined\n      if(lobby.playersMap.has(client)) return;\n\n      // actual joining\n      lobby.join(client, data)\n        .then(()=>{\n          client.emit('joined');\n          lobby.emit('usersUpdate', lobby.mapUsers())\n\n          // show up on server's radar\n          // rank change and more\n          clients.set(client.id_, client);\n        })\n        .catch((reason)=>{\n          console.log(reason.message.yellow);\n          // client.emit('error', reason);\n        });\n\n    }\n\n  });\n\n  client.on('start', data => {\n\n    // verify participant to lobby\n    const lobby = client.lobby;\n    if(lobby) {\n\n      // return if client has already opted to start\n      if(lobby.playersMap.get(client)[3]) return;\n\n      // actual opt to start\n      lobby.startFrom(client, data)\n        .then((everyoneIsReady)=>{\n          client.emit('starting');\n          lobby.emit('playersUpdate', lobby.mapPlayers());\n\n          // start if everyone is ready\n          if(everyoneIsReady)\n            lobby.startGame(), lobby.emit('gameStarted', lobby.getSetupData());\n        })\n        .catch((reason)=>{\n          console.log(reason.message.yellow);\n          // client.emit('error', reason.message);\n        });\n\n    }\n\n  });\n\n\n\n\n  client.on('updateOptions', data => {\n\n    // remove connection to lobby\n    const lobby = client.lobby;\n    if(lobby) {\n\n      lobby.updateOptions(data);\n\n    } else {  }\n\n  });\n\n  client.on('setPassword', data => {\n\n    // remove connection to lobby\n    const lobby = client.lobby;\n    if(lobby) {\n\n      lobby.setPasswordFrom(client, data);\n\n    } else {  }\n\n  });\n\n  client.on('clearPassword', data => {\n\n    // remove connection to lobby\n    const lobby = client.lobby;\n    if(lobby) {\n\n      lobby.clearPasswordFrom(client, data);\n\n    } else {  }\n\n  });\n\n\n\n\n\n  client.on('disconnect', data => {\n\n    // remove connection to lobby\n    const lobby = client.lobby;\n    if(lobby) {\n\n      lobby.disconnect(client);\n      lobby.emit('usersUpdate', lobby.mapUsers());\n\n      // delete empty lobby after 5 seconds\n      setTimeout(()=>{\n        if(lobby.empty) LM.delete(lobby.id)\n      }, 5000);\n\n    } else {  }\n\n    // remove from server's radar\n    clients.delete(client.id_)\n\n  });\n\n\n\n\n\n\n\n\n\n  //\n  //     //tell the player they connected, giving them their id\n  //   client.emit('onconnected', { id: UUID() } );\n  // client.on('userid', (id) => {\n  //     client.userid = id;\n  //     console.log(`client ${client.userid} +`.green);\n  //   });\n  //\n  //   client.on('join lobby', lobbyID => {\n  //     let lobby = LM.lobby(lobbyID);\n  //     if(lobby) {\n  //       // check if there is room in lobby\n  //       lobby.emit('lobby state', lobby.simplify());\n  //       if(!lobby.join(client)) {\n  //         client.emit('spectate');\n  //         if(lobby.ongoing) {\n  //           client.emit('start', lobby.start());\n  //         }\n  //       } else { client.emit('lobby joined', lobby.type) }\n  //       clients.set(client.userid, client);\n  //       if(lobby.type == 'public') LM.updateLobbyPlacement(lobby); // TODO\n  //     } else {\n  //       client.emit('error', `lobby ${lobbyID} not found`);\n  //     }\n  //   });\n  //\n  //   client.on('set name', name => {\n  //     let lobby\n  //     if(lobby = client.lobby) {\n  //       if(client.active) lobby.players.get(client.userid).name = name;\n  //\n  //       lobby.emit('lobby state', lobby.simplify());\n  //\n  //       // if(lobby.full && lobby.ready) lobby.emit('start', lobby.game());\n  //     } else {\n  //       client.emit('error', 'set name request ignored');\n  //     }\n  //   });\n  //\n  //   client.on('set type', type => {\n  //     let lobby\n  //     if(lobby = client.lobby) {\n  //       if(client.active) lobby.players.get(client.userid).type = type;\n  //       client.emit('lobby state', lobby.simplify());\n  //       // if(lobby.full && lobby.ready) lobby.emit('start', lobby.game());\n  //     } else {\n  //       client.emit('error', 'set type request ignored');\n  //     }\n  //   });\n  //\n  //\n  //   client.on('set team', team => {\n  //     let lobby;\n  //     if((lobby = client.lobby) && lobby.type == 'private') {\n  //       if(team < lobby.max_teams && team >= -1) { // validations\n  //         if(client.active) lobby.players.get(client.userid).team = team;\n  //         // client.emit('lobby state', lobby.simplify());\n  //       } else { client.emit('error', 'invalid team'); }\n  //     } else {\n  //       client.emit('error', 'set team request ignored');\n  //     }\n  //   });\n  //\n  //\n  //   client.on('ready', () => {\n  //     let lobby;\n  //     if(lobby = client.lobby) {\n  //       if(lobby.playerCleared(client)) client.ready = true;\n  //       lobby.emit('lobby state', lobby.simplify());\n  //       console.log('ready');\n  //       if(lobby.sustainable && lobby.ready)\n  //         {\n  //           lobby.emit('start', lobby.start(()=>{\n  //             // on finish.. TODO: fix this.. also encapsulate all of these anonymous functions into a controller class\n  //             if(lobby.type == 'public') LM.updateLobbyPlacement(lobby);\n  //           }));\n  //         }\n  //     } else {\n  //       client.emit('error', 'ready request ignored');\n  //     }\n  //\n  //   });\n  //\n  //\n  //\n  //   client.on('disconnect', function () {\n  //\n  //           //Useful to know when someone disconnects\n  //       console.log(`client ${client.userid} -`.red);\n  //\n  //       clients.delete(client.userid);\n  //\n  //       let lobby = client.lobby;\n  //       if(lobby) {\n  //         let was_active = client.active;\n  //         lobby.remove(client);\n  //         if(lobby.ongoing && was_active) {\n  //           if(lobby.state.flagHolder == client.userid) lobby.emit('flag drop');\n  //           lobby.emit('disconnect player', client.userid);\n  //           if(lobby.unsustainable) {\n  //             lobby.emit('game error', 'a communications error occured');\n  //             lobby.endCurrentGame();\n  //           }\n  //         }\n  //         lobby.emit('lobby state', lobby.simplify());\n  //         if(lobby.type == 'public') LM.updateLobbyPlacement(lobby);\n  //\n  //         // once a lobby has been vacated by all players it is safe for that lobby to cease existence\n  //         // a single player joining an empty lobby will not happen often except with private practice lobbies\n  //         // otherwise keep it in the realm\n  //         setTimeout(()=>{ let del = false;\n  //           if(lobby.connected.size == 0) { LM.delete(lobby.id); del = true }\n  //           console.log(`lobby ${lobby.id} ${del ? `deleted` : `preserved`}`);\n  //         }, 5000);\n  //\n  //       }\n  //\n  //   }); //client.on disconnect\n\n\n\n\n\n  // during game\n  // client.on('input stack', data => client.lobby ? client.lobby.broadcast('input stack', data, client) : client.emit('stop'));\n\n  const addListenerList = function (list) {\n    for(let msg of list) addListener(msg);\n  };\n  \n  const addListener = function (msg) {\n    client.on(msg, (a) => client.lobby ? client.lobby.exec(msg, a, client) : 0);\n  };\n\n  const incomingMessages = [\n    'shipUpdated', 'shipOverridden', 'shipHPAdjusted',\n    'bulletCreated', 'bulletDestroyed',\n    'blockCreated', 'blockHPAdjusted', 'blockTeamSet', 'blockDestroyed',\n    'subCreated', 'subDestroyed',\n    'deathOccurrence',\n    'flagCaptured', 'flagDropped','flagProgress'];\n\n  addListenerList(incomingMessages);\n\n\n\n\n\n\n\n\n  // client.on('ship update', data => client.lobby ? client.lobby.broadcast('ship update', data, client) : client.emit('stop'));\n  // client.on('ship override', data => client.lobby ? client.lobby.broadcast('ship override', data, client) : client.emit('stop'));\n  // client.on('bullet create', data => client.lobby ? client.lobby.broadcast('bullet create', data, client) : client.emit('stop'));\n  // client.on('bullet destroy', data => client.lobby ? client.lobby.broadcast('bullet destroy', data, client) : client.emit('stop'));\n  //\n  // client.on('ship damage', data => client.lobby ? client.lobby.emit('ship damage', data) : client.emit('stop'));\n  //\n  // client.on('block create', data => client.lobby ? client.lobby.broadcast('block create', data, client) : client.emit('stop'));\n  // client.on('block destroy', data => client.lobby ? client.lobby.broadcast('block destroy', data, client) : client.emit('stop'));\n  // client.on('block damage', data => client.lobby ? client.lobby.broadcast('block damage', data, client) : client.emit('stop'));\n  // client.on('block change', data => client.lobby ? client.lobby.broadcast('block change', data, client) : client.emit('stop'));\n  //\n  // client.on('sub create', data => client.lobby ? client.lobby.broadcast('sub create', data, client) : client.emit('stop'));\n  // client.on('sub destroy', data => client.lobby ? client.lobby.broadcast('sub destroy', data, client) : client.emit('stop'));\n\n  /*client.on('combined', messages => {\n   if(!client.lobby) { client.emit('stop'); return; }\n\n   for(var [key, data] of messages) {\n   switch(key) {\n   case 'ship update':\n   client.lobby.broadcast('ship update', data, client); break;\n   case 'ship override':\n   client.lobby.broadcast('ship override', data, client); break;\n   }\n   }\n   });*/\n\n\n\n\n\n  this.onFinish = () => {\n\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}); //sio.sockets.on connection\n"]}