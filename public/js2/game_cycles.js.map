{"version":3,"sources":["../js/game_cycles.js"],"names":["_","require","TIME","sec","min","hrs","days","VARIATIONS","GameCycles","options","variables","refreshRate","refreshOffset","seed","Date","rotation","timeoutIndex","valueOf","listeners","Map","loop","change","execListeners","setTimeout","timeLeftUntilNextChange","prop","Array","choice","sample","clearTimeout","key","handler","listenerList","get","push","set","info","listener","indexOf","splice","now","delay","parseInt","seedWithDelay","interval","timeSinceSeed","timeSinceSeedWithDelay","cyclesSinceSeed","nextNumberOfCycles","nextTime","elapsedTimeInCycle","remainingTimeInCycle","module","exports","e","console","warn"],"mappings":"AAAA;;;;;AAKA;;;;;;AAEA,IAAMA,IAAIC,QAAQ,yBAAR,CAAV;;AAEA,IAAMC,OAAO;;AAEXC,OAAK,aAASA,IAAT,EAAc;AAAE,WAAOA,OAAM,IAAb;AAAmB,GAF7B;AAGXC,OAAK,aAASA,IAAT,EAAc;AAAE,WAAO,KAAKD,GAAL,CAASC,OAAM,EAAf,CAAP;AAA2B,GAHrC;AAIXC,OAAK,aAASA,IAAT,EAAc;AAAE,WAAO,KAAKD,GAAL,CAASC,OAAM,EAAf,CAAP;AAA2B,GAJrC;AAKXC,QAAM,cAASA,KAAT,EAAe;AAAE,WAAO,KAAKD,GAAL,CAASC,QAAO,EAAhB,CAAP;AAA4B;;AALxC,CAAb;;AASA;AACA,IAAMC,aAAa;;AAEjB,UAAY,CAAC,CAAD,EAAI,CAAJ,CAFK;AAGjB,SAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;;AAHK,CAAnB;;IAQMC,U;AAEJ,wBAA2B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA,6BAOrBA,OAPqB,CAGvBC,SAHuB;AAAA,QAGvBA,SAHuB,sCAGD,CAAC,MAAD,EAAS,KAAT,CAHC;AAAA,+BAOrBD,OAPqB,CAIvBE,WAJuB;AAAA,QAIvBA,WAJuB,wCAIDT,KAAKG,GAAL,CAAS,CAAT,CAJC;AAAA,gCAOrBI,OAPqB,CAKvBG,aALuB;AAAA,QAKvBA,aALuB,yCAKD,CALC;AAAA,wBAOrBH,OAPqB,CAMvBI,IANuB;AAAA,QAMvBA,IANuB,iCAMD,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CANC;;AAUzB;;AAEA;;AACA,SAAKJ,SAAL,GAAiBA,SAAjB;;AAEA;AACA;AACA,SAAKC,WAAL,GAAmBA,WAAnB,CAjByB,CAiBO;;AAEhC;AACA;AACA,SAAKC,aAAL,GAAqBA,aAArB;;AAEA;AACA,SAAKG,QAAL,GAAgB,EAAhB;;AAGA;;AAEA;AACA,SAAKC,YAAL,GAAoB,CAAC,CAArB;;AAEA,SAAKH,IAAL,GAAYA,KAAKI,OAAL,EAAZ;;AAEA,SAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;;AAEA;AACA,SAAKC,IAAL;AAED;;;;2BAIM;AAAA;;AACL,WAAKC,MAAL;AACA,WAAKC,aAAL,CAAmB,gBAAnB,EAAqC,KAAKP,QAA1C;AACA,WAAKC,YAAL,GACEO,WAAW,YAAM;AACf,cAAKH,IAAL;AACD,OAFD,EAEG,KAAKI,uBAFR,CADF;AAID;;;6BAEQ;;AAEP,WAAKT,QAAL,GAAgB,EAAhB;;AAFO;AAAA;AAAA;;AAAA;AAIP,6BAAgB,KAAKL,SAArB,8HAAgC;AAAA,cAAxBe,IAAwB;;;AAE9B,cAAI,EAAElB,WAAWkB,IAAX,aAA4BC,KAA9B,CAAJ,EAA2C;;AAE3C,cAAMC,SAAS3B,EAAEO,WAAWkB,IAAX,CAAF,EAAoBG,MAApB,EAAf;;AAEA,cAAG,OAAOD,MAAP,KAAkB,WAArB,EAAkC,KAAKZ,QAAL,CAAcU,IAAd,IAAsBE,MAAtB;AAEnC;AAZM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaR;;;2BAEM;AACLE,mBAAa,KAAKb,YAAlB;AACD;;;;;AAsCD;gCACYc,G,EAAKC,O,EAAS;;AAExB,UAAG,OAAOA,OAAP,KAAmB,UAAtB,EACE,OAAO,KAAP;;AAEF,UAAMC,eAAe,KAAKd,SAAL,CAAee,GAAf,CAAmBH,GAAnB,KAA2B,EAAhD;AACAE,mBAAaE,IAAb,CAAkBH,OAAlB;AACA,WAAKb,SAAL,CAAeiB,GAAf,CAAmBL,GAAnB,EAAwBE,YAAxB;;AAEA,aAAO,IAAP,CATwB,CASX;AAEd;;;kCAEaF,G,EAAKM,I,EAAM;AACvB,UAAMJ,eAAe,KAAKd,SAAL,CAAee,GAAf,CAAmBH,GAAnB,KAA2B,EAAhD;AADuB;AAAA;AAAA;;AAAA;AAEvB,8BAAoBE,YAApB;AAAA,cAAQK,QAAR;;AACEA,mBAASD,IAAT;AADF;AAFuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIxB;;;mCAEcN,G,EAAKC,O,EAAS;AAC3B,UAAMC,eAAe,KAAKd,SAAL,CAAee,GAAf,CAAmBH,GAAnB,KAA2B,EAAhD;AACA,UAAMQ,UAAUN,aAAaM,OAAb,CAAqBP,OAArB,CAAhB;AACA,UAAGO,YAAY,CAAC,CAAhB,EAAmB,OAAO,KAAP,CAHQ,CAGM;AACjCN,mBAAaO,MAAb,CAAoBD,OAApB,EAA6B,CAA7B;AACA,aAAO,IAAP,CAL2B,CAKd;AACd;;;wBA5D4B;;AAE3B,UAAME,MAAM1B,KAAK0B,GAAL,EAAZ;AACA,UAAMC,QAAQC,SAAS,KAAK9B,aAAL,GAAqB,KAAKD,WAAnC,CAAd;AACA,UAAMgC,gBAAgB,KAAK9B,IAAL,GAAY4B,KAAlC;;AAEA,aAASD,MAAMG,aAAf;AAED;;;wBAEoB;;AAEnB,UAAMC,WAAW,KAAKjC,WAAtB;AACA,UAAMkC,gBAAgB,KAAKC,sBAA3B;AACA,UAAMC,kBAAkBL,SAASG,gBAAgBD,QAAzB,CAAxB;AACA,UAAMI,qBAAqBD,kBAAkB,CAA7C;AACA,UAAME,WAAW,KAAKpC,IAAL,GAAa+B,WAAWI,kBAAzC;;AAEA,aAAOC,QAAP;AAED;;;wBAE6B;;AAE5B,UAAML,WAAW,KAAKjC,WAAtB;AACA,UAAMkC,gBAAgB,KAAKC,sBAA3B;AACA,UAAMI,qBAAqBL,gBAAgBD,QAA3C;AACA,UAAMO,uBAAuBP,WAAWM,kBAAxC;;AAEA,aAAOC,oBAAP;AAED;;;;;;AAmCH,IAAI;AACFC,SAAOC,OAAP,GAAiB7C,UAAjB;AACD,CAFD,CAEE,OAAM8C,CAAN,EAAS;AAACC,UAAQC,IAAR,CAAaF,CAAb;AAAgB","file":"game_cycles.js","sourcesContent":["/*\n *  GameCycles: a class that maintains an on\n *  note ~ time will be measured in minutes\n */\n\n\"use strict\";\n\nconst _ = require('./ext/underscore-min.js');\n\nconst TIME = {\n\n  sec: function(sec) { return sec * 1000 },\n  min: function(min) { return this.sec(min * 60) },\n  hrs: function(hrs) { return this.min(hrs * 60) },\n  days: function(days) { return this.hrs(days * 24) },\n\n};\n\n// VARIATIONS : the properties the game cycles class can change and their options\nconst VARIATIONS = {\n\n  'mode'    : [0, 1],\n  'map'     : [0, 1, 2, 3],\n\n};\n\n\nclass GameCycles {\n\n  constructor (options = {}) {\n\n    const {\n      variables           = ['mode', 'map'], // items of focus\n      refreshRate         = TIME.hrs(6), // ms\n      refreshOffset       = 0, // %\n      seed                = new Date(2017, 0, 1), // 2017 Jan 1st @ 00:00.000 (month is 0-based)\n    } = options;\n\n    \n    // PUBLIC //\n\n    // this.variables: these are the objects being cycled.\n    this.variables = variables;\n\n    // this.refreshRate: how often the cycles are updated in minutes;\n    //   constraints: 0 < x\n    this.refreshRate = refreshRate; // 1 hr\n\n    // this.refreshOffset: the % of the refresh rate serving as the delay when starting at time 0\n    //   constraints: 0 <= x < 1\n    this.refreshOffset = refreshOffset;\n\n    // this.rotation: is the current state of the variables.\n    this.rotation = {};\n\n\n    // PRIVATE //\n\n    // this.timeoutIndex = every loop sets the next timeout which is saved here\n    this.timeoutIndex = -1;\n\n    this.seed = seed.valueOf();\n\n    this.listeners = new Map();\n\n    // START //\n    this.loop();\n\n  }\n\n\n\n  loop() {\n    this.change();\n    this.execListeners('rotationUpdate', this.rotation);\n    this.timeoutIndex =\n      setTimeout(() => {\n        this.loop();\n      }, this.timeLeftUntilNextChange);\n  }\n  \n  change() {\n\n    this.rotation = {};\n\n    for(let prop of this.variables) {\n\n      if( !(VARIATIONS[prop] instanceof Array) ) continue;\n\n      const choice = _(VARIATIONS[prop]).sample();\n\n      if(typeof choice !== 'undefined') this.rotation[prop] = choice;\n\n    }\n  }\n\n  stop() {\n    clearTimeout(this.timeoutIndex);\n  }\n\n\n\n  get timeSinceSeedWithDelay() {\n\n    const now = Date.now();\n    const delay = parseInt(this.refreshOffset * this.refreshRate);\n    const seedWithDelay = this.seed + delay;\n\n    return ( now - seedWithDelay );\n\n  }\n\n  get nextChangeTime() {\n\n    const interval = this.refreshRate;\n    const timeSinceSeed = this.timeSinceSeedWithDelay;\n    const cyclesSinceSeed = parseInt(timeSinceSeed / interval);\n    const nextNumberOfCycles = cyclesSinceSeed + 1;\n    const nextTime = this.seed + (interval * nextNumberOfCycles);\n\n    return nextTime;\n\n  }\n\n  get timeLeftUntilNextChange() {\n\n    const interval = this.refreshRate;\n    const timeSinceSeed = this.timeSinceSeedWithDelay;\n    const elapsedTimeInCycle = timeSinceSeed % interval;\n    const remainingTimeInCycle = interval - elapsedTimeInCycle;\n\n    return remainingTimeInCycle;\n\n  }\n\n\n  // Listeners\n  addListener(key, handler) {\n\n    if(typeof handler !== 'function')\n      return false;\n\n    const listenerList = this.listeners.get(key) || [];\n    listenerList.push(handler);\n    this.listeners.set(key, listenerList);\n\n    return true; // success\n\n  }\n\n  execListeners(key, info) {\n    const listenerList = this.listeners.get(key) || [];\n    for(let listener of listenerList)\n      listener(info);\n  }\n\n  removeListener(key, handler) {\n    const listenerList = this.listeners.get(key) || [];\n    const indexOf = listenerList.indexOf(handler);\n    if(indexOf === -1) return false; // failure\n    listenerList.splice(indexOf, 1);\n    return true; // success\n  }\n\n}\n\n\n\ntry {\n  module.exports = GameCycles;\n} catch(e) {console.warn(e)}"]}