{"version":3,"sources":["../js/block.js"],"names":["Block","data","id","team","Object","assign","stats","position","V2D","x","y","velocity","length","speed","angle","radius","locked","hp","HP_CAPACITY","life_counter","disabled","dt","mul","Math","pow","FRICTION","add","mul_","scale","LIFESPAN","lock","qualified","ENV","game","removeBlock","percent","MIN_RADIUS","MAX_RADIUS","SPEED","MIN_SPEED","MAX_SPEED","LOWER_VELOCITY_LIMIT","DISRUPTIVE_FRICTION"],"mappings":";;;;;;IAAMA,K;AAEF,iBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKC,EAAL,GAAUD,KAAKC,EAAf;AACA,SAAKC,IAAL,GAAYF,KAAKE,IAAjB;;AAEAC,WAAOC,MAAP,CAAc,IAAd,EAAoBL,MAAMM,KAA1B;;AAEA;AACA,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,CAAQP,KAAKM,QAAL,CAAcE,CAAtB,EAAyBR,KAAKM,QAAL,CAAcG,CAAvC,CAAhB;;AAEA,SAAKC,QAAL,GAAgB,IAAIH,GAAJ,EAAhB;AACA,SAAKG,QAAL,CAAcC,MAAd,GAAuBX,KAAKY,KAA5B;AACA,SAAKF,QAAL,CAAcG,KAAd,GAAsBb,KAAKa,KAA3B;;AAEA,SAAKC,MAAL,GAAcd,KAAKc,MAAnB;AACA,SAAKC,MAAL,GAAc,KAAd;;AAEA,SAAKC,EAAL,GAAU,KAAKC,WAAL,GAAmBjB,KAAKgB,EAAlC;;AAEA,SAAKE,YAAL,GAAoB,CAApB;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACD;;;;2BAEMC,E,EAAI;AACT,UAAG,CAAC,KAAKL,MAAT,EAAiB;AACf,aAAKL,QAAL,CAAcW,GAAd,CAAkBC,KAAKC,GAAL,CAAS,KAAKC,QAAd,EAAyB,KAAGJ,EAA5B,CAAlB;AACA,aAAKd,QAAL,CAAcmB,GAAd,CAAkB,KAAKf,QAAL,CAAcgB,IAAd,CAAmBN,EAAnB,CAAlB;;AAEA;AACA,aAAKO,KAAL,GAAa,CAAC,KAAKjB,QAAL,CAAcC,MAAd,GAAuB,KAAvB,GAA+B,CAAhC,IAAqC,EAAlD,CALe,CAKuC;;AAEtD;AACA,YAAG,CAAC,KAAKO,YAAL,IAAmBE,EAApB,IAA0B,KAAKQ,QAAlC,EAA4C,KAAKC,IAAL;AAC7C;AACD;AACD;;;2BAEM;AACL,WAAKF,KAAL,GAAa,CAAb;AACA;AACA,WAAKG,SAAL,GAAiB,IAAjB;AACD;;;2BAKMd,E,EAAI;AACT,WAAKA,EAAL,IAAWA,EAAX;AACA,UAAG,KAAKA,EAAL,IAAW,CAAd,EAAiB,KAAKG,QAAL,GAAgB,IAAhB;AACjB,UAAG,KAAKA,QAAR,EAAkBY,IAAIC,IAAJ,CAASC,WAAT,CAAqB,KAAKhC,EAA1B;AAClB,aAAO,KAAKkB,QAAZ;AACD;;;wBARY;AAAE,aAAO,KAAKH,EAAL,GAAU,KAAKC,WAAtB;AAAmC,K;sBACvCiB,O,EAAS;AAAE,WAAKlB,EAAL,GAAUkB,UAAU,KAAKjB,WAAzB;AAAsC;;;;;;AAU9DlB,MAAMM,KAAN,GAAc;AACZ8B,cAAY,EADA,EACI;AAChBC,cAAY,EAFA,EAEI;AAChBC,SAAO,GAHK;AAIZC,aAAW,GAJC;AAKZC,aAAW,GALC;AAMZf,YAAU,IANE;AAOZgB,wBAAsB,EAPV;AAQZ;AACAZ,YAAU,GATE,EASG;;AAEfa,uBAAqB;AAXT,CAAd","file":"block.js","sourcesContent":["class Block {\n\n    constructor(data) {\n      this.id = data.id;\n      this.team = data.team;\n\n      Object.assign(this, Block.stats);\n\n      // needs work\n      this.position = new V2D(data.position.x, data.position.y);\n\n      this.velocity = new V2D();\n      this.velocity.length = data.speed;\n      this.velocity.angle = data.angle;\n\n      this.radius = data.radius;\n      this.locked = false;\n\n      this.hp = this.HP_CAPACITY = data.hp;\n\n      this.life_counter = 0;\n      this.disabled = false;\n    }\n\n    update(dt) {\n      if(!this.locked) {\n        this.velocity.mul(Math.pow(this.FRICTION, (60*dt)));\n        this.position.add(this.velocity.mul_(dt));\n\n        // this.radius = (this.velocity.length * 0.9 + 3); //(8 -> 3)\n        this.scale = (this.velocity.length * 0.006 + 3) / 10; //(.8 -> .3)\n\n        // if(this.velocity.length < this.LOWER_VELOCITY_LIMIT) this.lock();\n        if((this.life_counter+=dt) > this.LIFESPAN) this.lock();\n      }\n      // if(++this.life_counter > this.LIFESPAN) this.disabled = true;\n    }\n\n    lock() {\n      this.scale = 1;\n      // this.radius = 10;\n      this.qualified = true;\n    }\n\n    get health() { return this.hp / this.HP_CAPACITY }\n    set health(percent) { this.hp = percent * this.HP_CAPACITY }\n\n    damage(hp) {\n      this.hp -= hp;\n      if(this.hp <= 0) this.disabled = true;\n      if(this.disabled) ENV.game.removeBlock(this.id);\n      return this.disabled;\n    }\n  }\n\n  Block.stats = {\n    MIN_RADIUS: 45, //18, //16, //10,\n    MAX_RADIUS: 70, //36, //30, //20,\n    SPEED: 440,\n    MIN_SPEED: 360,\n    MAX_SPEED: 900,\n    FRICTION: 0.96,\n    LOWER_VELOCITY_LIMIT: 30,\n    // DRIFT: 30,\n    LIFESPAN: 0.6, //s\n\n    DISRUPTIVE_FRICTION: 0.1\n  }\n"]}