{"version":3,"sources":["../js/lobby_manager.js"],"names":["Lobby","require","RankedLobby","shortid","Set","prototype","draw","next","values","value","delete","Map","shift","key","keys","get","getNearestNumber","a","n","l","length","p","Math","abs","LobbyManager","cycles","lobbies","public","private","practice","publicAvailableLobbies","lobbyID","has","ID","rank","sortedLobbies","sort","b","sortedLobbyRanks","map","nearestIndex","nearestLobby","id","waitThenCheck","new_public","lobby","isEmpty","empty","hasRoom","full","isNotInProgress","ongoing","stillExists","set","waitTime","setTimeout","checkLobby","console","log","size","Array","from","generate","slice","new_lobby","players","teams","options","typeIndex","new_ID","findLobbyFor","module","exports"],"mappings":"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","file":"lobby_manager.js","sourcesContent":["\n\"use strict\";\nvar Lobby = require('./server_lobby.js');\nvar RankedLobby = require('./server_lobby_ranked.js');\nvar shortid = require('shortid');\nSet.prototype.draw = function() { var next = this.values().next().value; this.delete(next); return next }\nMap.prototype.shift = function() { var key = this.keys().next().value; var next = this.get(key); this.delete(key); return next }\n\n//+ Carlos R. L. Rodrigues\n//@ http://jsfromhell.com/array/nearest-number [rev. #0]\n\nfunction getNearestNumber(a, n){\n  if((l = a.length) < 2)\n    return l - 1;\n  for(var l, p = Math.abs(a[--l] - n); l--;)\n    if(p < (p = Math.abs(a[l] - n)))\n      break;\n  return l + 1;\n}\n\n\nclass LobbyManager {\n  constructor (cycles) {\n    this.lobbies = new Map();\n    this.public = new Map();\n    this.private = new Map();\n    this.practice = new Map();\n    // this.ongoing = new Map();\n    // this.available = new Map();\n\n    // this.joinable = new Map();\n    // this.min_available_lobby_count = 2;\n    // for(var i = 0; i < this.min_available_lobby_count; i++) this.new_public(); // populate\n\n    this.cycles = cycles;\n\n    this.publicAvailableLobbies = new Map();\n\n  }\n\n  exists(lobbyID) {return this.lobbies.has(lobbyID)}\n  existsInPrivate(lobbyID) {return this.private.has(lobbyID)}\n\n  lobby(ID) {return this.lobbies.get(ID)}\n\n  findLobbyFor(rank) {\n\n    const sortedLobbies = [...this.publicAvailableLobbies.values()].sort((a, b) => a.rank - b.rank);\n    const sortedLobbyRanks = sortedLobbies.map(l => l.rank);\n\n    const nearestIndex = getNearestNumber(sortedLobbyRanks, rank);\n    const nearestLobby = sortedLobbies[nearestIndex];\n\n    if(nearestLobby && Math.abs(nearestLobby.rank - rank) < 30) {\n      this.publicAvailableLobbies.delete(nearestLobby.id);\n\n      this.waitThenCheck(nearestLobby);\n      return nearestLobby.id;\n    }\n\n    return this.new_public();\n\n  }\n\n  checkLobby(lobby) {\n\n    // check if anyone is present\n    const isEmpty = lobby.empty;\n\n    if(isEmpty) {\n      this.delete(lobby.id);\n      return false;\n    }\n\n    // otherwise, set and return availability\n    const hasRoom = !lobby.full;\n    const isNotInProgress = !lobby.ongoing;\n    const stillExists = this.public.has(lobby.id);\n\n    if(hasRoom && isNotInProgress && stillExists) {\n      this.publicAvailableLobbies.set(lobby.id, lobby);\n      return true;\n    }\n\n    this.publicAvailableLobbies.delete(lobby.id);\n    return false;\n\n  }\n\n  waitThenCheck(lobby, waitTime = 6000) {\n    setTimeout(() => this.checkLobby(lobby), waitTime);\n  }\n\n  // next() {\n  //   // this.relay_status();\n  //   while(this.joinable.size < this.min_available_lobby_count) this.new_public();\n  //   let next = this.joinable.shift();\n  //   setTimeout(() => { this.updateLobbyPlacement(next) }, 2000);\n  //   return next.id;\n  // }\n  //\n  // updateLobbyPlacement(lobby) {\n  //   // console.log(`${lobby.id} :: full: ${lobby.full}, ongoing: ${lobby.ongoing}, public ${this.public.has(lobby.id)}`)\n  //   if(!lobby.full && !lobby.ongoing && this.public.has(lobby.id)) {\n  //     this.joinable.set(lobby.id, lobby);\n  //     console.log(`lobby ${lobby.id} IS joinable`);\n  //   }\n  //   else { this.joinable.delete(lobby.id); console.log(`lobby ${lobby.id} is NOT joinable`) }\n  // }\n\n  relay_status() {\n    console.log(`---------- STATUS -----------`);\n    console.log(`| public (${this.public.size})`);\n    console.log(`| `, Array.from(this.public).map(a=>a[0]));\n    console.log(`| available (${this.publicAvailableLobbies.size})`);\n    console.log(`| `, Array.from(this.publicAvailableLobbies).map(a=>a[0]));\n    // console.log(`===============================`);\n  }\n\n  new_ID() {\n    return shortid.generate().slice(0, 6);\n  }\n\n  new_public() {\n    var lobby = this.new_lobby(0, {players: 4, teams: 2});\n    this.public.set(lobby.id, lobby);\n    this.publicAvailableLobbies.set(lobby.id, lobby);\n    // this.joinable.set(lobby.id, lobby);\n    return lobby.id;\n  }\n\n  new_private(options) {\n    var lobby = this.new_lobby(1);\n    this.private.set(lobby.id, lobby);\n    return lobby.id;\n  }\n\n  new_practice() {\n    var lobby = this.new_lobby(2, {players: 1});\n    this.practice.set(lobby.id, lobby);\n    return lobby.id;\n  }\n\n  new_lobby(typeIndex, options) {\n    const id = this.new_ID();\n    const lobby = typeIndex ? new Lobby(id, typeIndex, options) : new RankedLobby(id, typeIndex, rank=>this.findLobbyFor(rank), ()=>this.waitThenCheck(...arguments), this.cycles, options);\n    this.lobbies.set(id, lobby);\n    console.log(`new lobby: ${id}`);\n    return lobby;\n  }\n\n  delete(id) {\n    this.lobbies.delete(id);\n    this.public.delete(id);\n    this.private.delete(id);\n    this.practice.delete(id);\n    this.publicAvailableLobbies.delete(id);\n  }\n\n\n}\n\nmodule.exports = LobbyManager;\n"]}