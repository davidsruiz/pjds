{"version":3,"sources":["../js/friends.js"],"names":["Friends","historyLimit","loadState","history","parseMap","ENV","storage","Map","friends","stringifyMap","map","JSON","stringify","Array","from","string","parse","e","code","name","set","saveState","delete","list","size","_","draw","clear"],"mappings":";;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IAGMA,O;AAEJ,qBAAc;AAAA;;AAEZ,SAAKC,YAAL,GAAoB,EAApB;;AAEA,SAAKC,SAAL;AAED;;AAED;;;;gCAEY;;AAEV,UAAMC,UAAU,KAAKC,QAAL,CAAcC,IAAIC,OAAJ,CAAYH,OAA1B,KAAsC,IAAII,GAAJ,EAAtD;AACA,UAAMC,UAAU,KAAKJ,QAAL,CAAcC,IAAIC,OAAJ,CAAYE,OAA1B,KAAsC,IAAID,GAAJ,EAAtD;;AAEA,WAAKJ,OAAL,GAAeA,OAAf;AACA,WAAKK,OAAL,GAAeA,OAAf;AAED;;;gCAEW;;AAEVH,UAAIC,OAAJ,CAAYH,OAAZ,GAAsB,KAAKM,YAAL,CAAkB,KAAKN,OAAvB,CAAtB;AACAE,UAAIC,OAAJ,CAAYE,OAAZ,GAAsB,KAAKC,YAAL,CAAkB,KAAKD,OAAvB,CAAtB;AAED;;;iCAEYE,G,EAAK;AAChB,aAAOC,KAAKC,SAAL,CAAeC,MAAMC,IAAN,CAAWJ,GAAX,CAAf,CAAP;AACD;;;6BAEQK,M,EAAQ;;AAEf,UAAIL,YAAJ;;AAEA,UAAI;AACFA,cAAM,IAAIH,GAAJ,CAAQI,KAAKK,KAAL,CAAWD,MAAX,CAAR,CAAN;AACD,OAFD,CAEE,OAAME,CAAN,EAAS,CAAE;;AAEb,aAAOP,GAAP;AAED;;AAGD;;;AAKA;;;;8BAEUQ,I,EAAMC,I,EAAM;AACpB,WAAKX,OAAL,CAAaY,GAAb,CAAiBF,IAAjB,EAAuBC,IAAvB;AACA,WAAKE,SAAL;AACD;;;kCAEaH,I,EAAMC,I,EAAM;AACxB,WAAKX,OAAL,CAAaY,GAAb,CAAiBF,IAAjB,EAAuBC,IAAvB;AACA,WAAKE,SAAL;AACD;;;iCAEYH,I,EAAM;AACjB,WAAKV,OAAL,CAAac,MAAb,CAAoBJ,IAApB;AACA,WAAKG,SAAL;AACD;;;+BAEUE,I,EAAM;AAAA;AAAA;AAAA;;AAAA;AACf,6BAAwBA,IAAxB;AAAA;;AAAA;;AAAA,cAASL,IAAT;AAAA,cAAeC,IAAf;;AACE,eAAKhB,OAAL,CAAaiB,GAAb,CAAiBF,IAAjB,EAAuBC,IAAvB;AADF;AADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGf,aAAM,KAAKhB,OAAL,CAAaqB,IAAb,GAAoB,KAAKvB,YAA/B;AAA6CwB,UAAE,KAAKtB,OAAP,EAAgBuB,IAAhB;AAA7C,OACA,KAAKL,SAAL;AACD;;;mCAEc;AACb,WAAKlB,OAAL,CAAawB,KAAb;AACA,WAAKN,SAAL;AACD","file":"friends.js","sourcesContent":["\n// function listHistory(callback) {\n//   var pp = ENV.storage.previous_players;\n//   if(pp) {\n//     pp = JSON.parse(pp);\n//\n//     $.ajax({\n//       url: '/online_status',\n//       type: 'POST',\n//       data: JSON.stringify({ history: pp }),\n//       contentType: 'application/json; charset=utf-8',\n//       dataType: 'json'\n//     })\n//     .done(function( list ) {\n//       list = list.reverse();\n//       for(var user of list) {\n//         var a = document.createElement('a'); a.href = `${location.origin}/${user[1]}`;\n//         var span = document.createElement('span'); span.className = 'mi'; span.textContent = user[0];\n//\n//         a.appendChild(span);\n//\n//         $('.menu').append(a);\n//\n//         // <a href=\"/friends\"><input type=\"submit\" value=\"with friends\"></a>\n//\n//         console.log(user)\n//       }\n//       callback();\n//     });\n//\n//   }\n// }\n// $(() => {\n//   listHistory(()=>{\n//\n//     $('.mi:not([disabled])').mouseover(jqEvent => {\n//       $('.mi').removeClass('selected');\n//       var span = jqEvent.currentTarget;\n//       span.classList.add('selected')\n//       ENV.sound.play('item-hover');\n//     });\n//     $('.mi:not([disabled])').mouseout(jqEvent => {\n//       var span = jqEvent.currentTarget;\n//       span.classList.remove('selected')\n//     });\n//\n//   });\n// })\n\n\nclass Friends {\n\n  constructor() {\n\n    this.historyLimit = 24;\n\n    this.loadState();\n\n  }\n\n  // interfacing with storage\n\n  loadState() {\n\n    const history = this.parseMap(ENV.storage.history) || new Map();\n    const friends = this.parseMap(ENV.storage.friends) || new Map();\n\n    this.history = history;\n    this.friends = friends;\n\n  }\n\n  saveState() {\n\n    ENV.storage.history = this.stringifyMap(this.history);\n    ENV.storage.friends = this.stringifyMap(this.friends);\n\n  }\n\n  stringifyMap(map) {\n    return JSON.stringify(Array.from(map))\n  }\n\n  parseMap(string) {\n\n    let map;\n\n    try {\n      map = new Map(JSON.parse(string));\n    } catch(e) {}\n\n    return map;\n\n  }\n\n\n  // interfacing with the server\n\n\n\n\n  // interfacing with friends class\n\n  addFriend(code, name) {\n    this.friends.set(code, name);\n    this.saveState();\n  }\n\n  setFriendName(code, name) {\n    this.friends.set(code, name);\n    this.saveState();\n  }\n\n  deleteFriend(code) {\n    this.friends.delete(code)\n    this.saveState();\n  }\n\n  addHistory(list) {\n    for(let [code, name] of list)\n      this.history.set(code, name);\n    while(this.history.size > this.historyLimit) _(this.history).draw();\n    this.saveState();\n  }\n  \n  clearHistory() {\n    this.history.clear();\n    this.saveState();\n  }\n\n\n}\n\n\n\n"]}